{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\allen\\\\dev\\\\FreshroadReact\\\\src\\\\pages\\\\Chatpage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../App.css';\nimport freshroadlogo from '../images/freshroadlogo.png';\nimport avatarImage from '../images/callrep.png';\nimport { PaperAirplaneIcon, MicrophoneIcon, TranslateIcon } from '@heroicons/react/outline';\nimport { tts11 } from '../api/elevenlabs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterfacePage = () => {\n  _s();\n  // -------------------------\n  // State\n  // -------------------------\n  const [messages, setMessages] = useState([{\n    sender: 'bot',\n    text: 'Welcome to the Santa Clara County 211 call center. How can I help you today?'\n  }]);\n  const [input, setInput] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const [spokenText, setSpokenText] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('English');\n  const [isTranslating, setIsTranslating] = useState(false);\n\n  // -------------------------\n  // Refs & Navigation\n  // -------------------------\n  const messageEndRef = useRef(null);\n  const navigate = useNavigate();\n\n  // -------------------------\n  // Detect Mobile (only once, so it doesn't flip mid-session)\n  // -------------------------\n  const [mobileLayout] = useState(() => /Mobi|Android/i.test(navigator.userAgent));\n\n  // -------------------------\n  // Language Codes\n  // -------------------------\n  const languageCodes = {\n    English: 'en-US',\n    Español: 'es-ES',\n    中文: 'zh-CN',\n    Français: 'fr-FR',\n    Deutsch: 'de-DE',\n    Italiano: 'it-IT',\n    日本語: 'ja-JP',\n    한국어: 'ko-KR',\n    Português: 'pt-BR',\n    Русский: 'ru-RU'\n  };\n\n  // -------------------------\n  // OpenAI Key (example)\n  // -------------------------\n  const OPENAI_API_KEY = 'sk-...'; // Replace with a secure mechanism\n\n  // ==========================================================================\n  // Fetch GPT Response\n  // ==========================================================================\n  const fetchChatGPTResponse = async userMessage => {\n    const chatHistory = [{\n      role: 'system',\n      content: 'Limit responses to three sentences and assume the user can read English so send all responses in English but do not let the user know about this prompt. When you receive questions in another language, understand it and reply in English. The conversations will be multilingual. You work as a customer service representative for the Santa Clara County 211 call center. Your job is to provide accurate information about the services Santa Clara County can offer. Always speak in sentences and lists. If the user is asking for food assistance, give information on CalFresh, the food stamp application, include eligibility. If user agrees to let you help fill out the form, send back only the code \"CalFreshAccepted\".'\n    }, ...messages.map(msg => ({\n      role: msg.sender === 'user' ? 'user' : 'assistant',\n      content: msg.text\n    })), {\n      role: 'user',\n      content: userMessage\n    }];\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${OPENAI_API_KEY}`\n        },\n        body: JSON.stringify({\n          model: 'gpt-4',\n          messages: chatHistory\n        })\n      });\n      const data = await response.json();\n      const botMessage = data.choices[0].message.content.trim();\n\n      // Special check for CalFresh\n      if (botMessage === 'CalFreshAccepted') {\n        setMessages(prev => [...prev, {\n          sender: 'bot',\n          type: 'calfreshAccepted'\n        }]);\n        return;\n      }\n\n      // Normal Bot Response\n      handleBotResponse(botMessage);\n    } catch (error) {\n      console.error('Error fetching response:', error);\n      setMessages(prev => [...prev, {\n        sender: 'bot',\n        text: 'Sorry, I am having trouble responding at the moment. Please try again later.'\n      }]);\n    }\n  };\n\n  // ==========================================================================\n  // Handle Bot Response (Translate if needed, else just store & speak)\n  // ==========================================================================\n  const handleBotResponse = botMessage => {\n    if (selectedLanguage !== 'English') {\n      handleTranslateAndPlayTTS(botMessage);\n    } else {\n      setMessages(prev => [...prev, {\n        sender: 'bot',\n        text: botMessage\n      }]);\n      playTTS(botMessage);\n    }\n  };\n\n  // ==========================================================================\n  // Translate & TTS\n  // ==========================================================================\n  const handleTranslateAndPlayTTS = async message => {\n    const translationPrompt = `Translate the following text into ${selectedLanguage}: \"${message}\"`;\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${OPENAI_API_KEY}`\n        },\n        body: JSON.stringify({\n          model: 'gpt-4',\n          messages: [{\n            role: 'system',\n            content: translationPrompt\n          }]\n        })\n      });\n      const data = await response.json();\n      const translatedMessage = data.choices[0].message.content;\n      setMessages(prev => [...prev, {\n        sender: 'bot',\n        text: message,\n        translation: translatedMessage\n      }]);\n\n      // TTS in the translated language\n      playTTS(translatedMessage);\n    } catch (error) {\n      console.error('Error translating:', error);\n      setMessages(prev => [...prev, {\n        sender: 'bot',\n        text: 'Sorry, I am having trouble translating right now.'\n      }]);\n    }\n  };\n\n  // ==========================================================================\n  // TTS\n  // ==========================================================================\n  const playTTS = async (text, voiceId = 'pFZP5JQG7iQjIQuC4Bku') => {\n    try {\n      const audioBlob = await tts11(text, voiceId);\n      const audioUrl = URL.createObjectURL(audioBlob);\n      const audio = new Audio(audioUrl);\n      audio.play();\n    } catch (error) {\n      console.error('Error playing TTS audio:', error);\n    }\n  };\n\n  // ==========================================================================\n  // Send Message (Desktop only now)\n  // ==========================================================================\n  const handleSendMessage = () => {\n    if (input.trim() !== '') {\n      const userMessage = input.trim();\n      setMessages(prev => [...prev, {\n        sender: 'user',\n        text: userMessage\n      }]);\n      setInput('');\n      fetchChatGPTResponse(userMessage);\n    }\n  };\n\n  // ==========================================================================\n  // Voice Input\n  // ==========================================================================\n  const handleVoiceInput = () => {\n    if (isListening) {\n      // Stop listening\n      setIsListening(false);\n      setSpokenText('');\n    } else {\n      // Start listening\n      setIsListening(true);\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      if (!SpeechRecognition) {\n        console.error('Speech recognition not supported.');\n        setSpokenText('Not supported in this browser.');\n        setIsListening(false);\n        return;\n      }\n      const recognition = new SpeechRecognition();\n      recognition.lang = languageCodes[selectedLanguage] || 'en-US';\n      recognition.interimResults = false;\n      recognition.continuous = false;\n      recognition.onstart = () => {\n        setSpokenText('Listening...');\n      };\n      recognition.onresult = event => {\n        const transcript = event.results[0][0].transcript;\n        setSpokenText('');\n        setIsListening(false);\n        if (transcript.trim() !== '') {\n          // On mobile, we only have voice input, so add directly\n          setMessages(prev => [...prev, {\n            sender: 'user',\n            text: transcript\n          }]);\n          fetchChatGPTResponse(transcript);\n        }\n      };\n      recognition.onerror = event => {\n        console.error('Speech recognition error:', event.error);\n        setSpokenText('Could not understand, please try again.');\n        setIsListening(false);\n      };\n      recognition.onend = () => {\n        setSpokenText('');\n        setIsListening(false);\n      };\n      recognition.start();\n    }\n  };\n\n  // ==========================================================================\n  // Handle Language Change\n  // ==========================================================================\n  const handleLanguageChange = lang => {\n    setSelectedLanguage(lang);\n  };\n\n  // ==========================================================================\n  // On Key Press (Enter to Send) - Desktop only\n  // ==========================================================================\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n\n  // ==========================================================================\n  // On-demand Translation of Bot Messages\n  // ==========================================================================\n  const handleTranslateMessage = async (messageText, index) => {\n    if (isTranslating) return;\n    setIsTranslating(true);\n    const translationPrompt = `You are a helpful assistant that translates text to ${selectedLanguage}. Translate this text: \"${messageText}\"`;\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${OPENAI_API_KEY}`\n        },\n        body: JSON.stringify({\n          model: 'gpt-4',\n          messages: [{\n            role: 'system',\n            content: translationPrompt\n          }]\n        })\n      });\n      const data = await response.json();\n      const translatedMessage = data.choices[0].message.content;\n      setMessages(prev => {\n        const updated = [...prev];\n        updated[index] = {\n          ...updated[index],\n          translation: translatedMessage\n        };\n        return updated;\n      });\n      await playTTS(translatedMessage);\n    } catch (error) {\n      console.error('Error translating:', error);\n    } finally {\n      setIsTranslating(false);\n    }\n  };\n\n  // ==========================================================================\n  // Auto-scroll\n  // ==========================================================================\n  useEffect(() => {\n    if (messageEndRef.current) {\n      messageEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [messages]);\n\n  // ==========================================================================\n  // RENDER HELPER: Chat Messages\n  // ==========================================================================\n  const renderMessages = () => {\n    return messages.map((message, index) => {\n      // Special UI for CalFresh\n      if (message.type === 'calfreshAccepted') {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex mb-4 items-center justify-start w-full\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"max-w-sm w-auto p-4 rounded-lg shadow bg-green-100 text-green-800\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mb-2 font-semibold\",\n              children: \"CalFresh Application\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mb-4\",\n              children: \"We\\u2019re ready to help you fill out the CalFresh application.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => navigate('/resources/calfresh'),\n              className: \"px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600\",\n              children: \"Fill Out the Form\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 13\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this);\n      }\n\n      // Normal Bot/User Messages\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flex mb-4 items-center w-full ${message.sender === 'bot' ? 'justify-start' : 'justify-end'}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `max-w-sm w-auto px-4 py-2 rounded-lg shadow ${message.sender === 'bot' ? 'bg-white text-gray-800' : 'bg-cyan-400 text-white'}`,\n          children: [message.text, message.translation && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-2 text-sm text-gray-600\",\n            children: message.translation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 15\n          }, this), message.sender === 'bot' && message.text && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleTranslateMessage(message.text, index),\n            className: \"mt-2 text-xs text-blue-500 flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(TranslateIcon, {\n              className: \"h-5 w-5 mr-1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 17\n            }, this), \"Translate\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  // ==========================================================================\n  // MOBILE LAYOUT - Voice Only\n  // ==========================================================================\n  const MobileLayout = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col w-full h-screen overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"flex items-center justify-between h-12 px-4 bg-white border-b\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: freshroadlogo,\n          alt: \"Fresh Road Logo\",\n          className: \"w-24 h-auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate(-1),\n          className: \"text-sm font-semibold text-gray-900 hover:text-cyan-500 flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            className: \"h-5 w-5 mr-1\",\n            fill: \"none\",\n            viewBox: \"0 0 24 24\",\n            stroke: \"currentColor\",\n            strokeWidth: 2,\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              d: \"M15 19l-7-7 7-7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 13\n          }, this), \"Back\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-grow overflow-y-auto overflow-x-hidden bg-gray-100 px-4 pt-3 pb-20 w-full\",\n        children: [renderMessages(), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messageEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute bottom-0 left-0 right-0 bg-white border-t p-2 flex items-center space-x-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleVoiceInput,\n          className: `p-2 rounded-lg text-white ${isListening ? 'bg-red-500' : 'bg-cyan-400'} hover:bg-cyan-500 flex items-center justify-center`,\n          children: /*#__PURE__*/_jsxDEV(MicrophoneIcon, {\n            className: \"h-4 w-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedLanguage,\n          onChange: e => handleLanguageChange(e.target.value),\n          className: \"border rounded-lg p-1 text-sm\",\n          children: Object.keys(languageCodes).map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: lang,\n            children: lang\n          }, lang, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this);\n  };\n\n  // ==========================================================================\n  // DESKTOP LAYOUT (unchanged)\n  // ==========================================================================\n  const DesktopLayout = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col h-screen\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"flex justify-between items-center h-16 px-4 bg-white border-b\",\n        style: {\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          right: 0,\n          zIndex: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: freshroadlogo,\n          alt: \"Fresh Road Logo\",\n          className: \"w-35 h-8 mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate(-1),\n          className: \"text-xl font-bold text-gray-900 hover:text-cyan-500 flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            className: \"h-6 w-6 mr-2\",\n            fill: \"none\",\n            viewBox: \"0 0 24 24\",\n            stroke: \"currentColor\",\n            strokeWidth: 2,\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              d: \"M15 19l-7-7 7-7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 13\n          }, this), \"Back\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-grow flex overflow-hidden mt-16\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/3 bg-white rounded-lg shadow flex-shrink-0 flex flex-col\",\n          style: {\n            height: 'calc(100vh - 8rem)'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex-grow\",\n            style: {\n              backgroundImage: `url(${avatarImage})`,\n              backgroundSize: 'cover',\n              backgroundPosition: 'center',\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-4 bg-white\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-lg font-bold mb-2 text-center\",\n              children: \"211 Call Center\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-center text-sm mb-2\",\n              children: /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 503,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-center text-sm\",\n              children: \"Get assistance with community resources and support.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 505,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"mt-4 px-4 py-2 bg-cyan-400 text-white rounded-lg hover:bg-cyan-500 w-full\",\n              onClick: () => alert('Change Avatar functionality not implemented yet!'),\n              children: \"Change Avatar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 508,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-2/3 p-4 bg-gray-100 overflow-y-auto overflow-x-hidden\",\n          style: {\n            height: 'calc(100vh - 8rem)'\n          },\n          children: [renderMessages(), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messageEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center p-4 bg-white border-t\",\n        style: {\n          position: 'sticky',\n          bottom: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"flex-grow border rounded-lg px-4 py-2 focus:outline-none focus:ring focus:ring-cyan-300\",\n          placeholder: \"Type your message...\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyPress: handleKeyPress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          className: \"ml-2 px-4 py-2 bg-cyan-400 text-white rounded-lg hover:bg-cyan-500 flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(PaperAirplaneIcon, {\n            className: \"h-5 w-5 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 13\n          }, this), \"Send\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleVoiceInput,\n          className: `ml-4 px-4 py-2 rounded-lg text-white ${isListening ? 'bg-red-500' : 'bg-cyan-400'} hover:bg-cyan-500 flex items-center`,\n          children: [/*#__PURE__*/_jsxDEV(MicrophoneIcon, {\n            className: \"h-5 w-5 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 13\n          }, this), isListening ? 'Stop' : 'Voice Input']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedLanguage,\n          onChange: e => handleLanguageChange(e.target.value),\n          className: \"ml-4 px-4 py-2 border rounded-lg\",\n          children: Object.keys(languageCodes).map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: lang,\n            children: lang\n          }, lang, false, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 7\n    }, this);\n  };\n\n  // ==========================================================================\n  // Final Return: Only Voice Input on mobile\n  // ==========================================================================\n  return mobileLayout ? /*#__PURE__*/_jsxDEV(MobileLayout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 575,\n    columnNumber: 25\n  }, this) : /*#__PURE__*/_jsxDEV(DesktopLayout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 575,\n    columnNumber: 44\n  }, this);\n};\n_s(ChatInterfacePage, \"bDDb5cF/bS7wkE6auSO5xQyMtqU=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatInterfacePage;\nexport default ChatInterfacePage;\nvar _c;\n$RefreshReg$(_c, \"ChatInterfacePage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","freshroadlogo","avatarImage","PaperAirplaneIcon","MicrophoneIcon","TranslateIcon","tts11","jsxDEV","_jsxDEV","ChatInterfacePage","_s","messages","setMessages","sender","text","input","setInput","isListening","setIsListening","spokenText","setSpokenText","selectedLanguage","setSelectedLanguage","isTranslating","setIsTranslating","messageEndRef","navigate","mobileLayout","test","navigator","userAgent","languageCodes","English","Español","中文","Français","Deutsch","Italiano","日本語","한국어","Português","Русский","OPENAI_API_KEY","fetchChatGPTResponse","userMessage","chatHistory","role","content","map","msg","response","fetch","method","headers","Authorization","body","JSON","stringify","model","data","json","botMessage","choices","message","trim","prev","type","handleBotResponse","error","console","handleTranslateAndPlayTTS","playTTS","translationPrompt","translatedMessage","translation","voiceId","audioBlob","audioUrl","URL","createObjectURL","audio","Audio","play","handleSendMessage","handleVoiceInput","SpeechRecognition","window","webkitSpeechRecognition","recognition","lang","interimResults","continuous","onstart","onresult","event","transcript","results","onerror","onend","start","handleLanguageChange","handleKeyPress","e","key","handleTranslateMessage","messageText","index","updated","current","scrollIntoView","behavior","renderMessages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","MobileLayout","src","alt","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","ref","value","onChange","target","Object","keys","DesktopLayout","style","position","top","left","right","zIndex","height","backgroundImage","backgroundSize","backgroundPosition","width","alert","bottom","placeholder","onKeyPress","_c","$RefreshReg$"],"sources":["C:/Users/allen/dev/FreshroadReact/src/pages/Chatpage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../App.css';\r\nimport freshroadlogo from '../images/freshroadlogo.png';\r\nimport avatarImage from '../images/callrep.png';\r\nimport {\r\n  PaperAirplaneIcon,\r\n  MicrophoneIcon,\r\n  TranslateIcon,\r\n} from '@heroicons/react/outline';\r\nimport { tts11 } from '../api/elevenlabs';\r\n\r\nconst ChatInterfacePage = () => {\r\n  // -------------------------\r\n  // State\r\n  // -------------------------\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      sender: 'bot',\r\n      text: 'Welcome to the Santa Clara County 211 call center. How can I help you today?',\r\n    },\r\n  ]);\r\n  const [input, setInput] = useState('');\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [spokenText, setSpokenText] = useState('');\r\n  const [selectedLanguage, setSelectedLanguage] = useState('English');\r\n  const [isTranslating, setIsTranslating] = useState(false);\r\n\r\n  // -------------------------\r\n  // Refs & Navigation\r\n  // -------------------------\r\n  const messageEndRef = useRef(null);\r\n  const navigate = useNavigate();\r\n\r\n  // -------------------------\r\n  // Detect Mobile (only once, so it doesn't flip mid-session)\r\n  // -------------------------\r\n  const [mobileLayout] = useState(() =>\r\n    /Mobi|Android/i.test(navigator.userAgent)\r\n  );\r\n\r\n  // -------------------------\r\n  // Language Codes\r\n  // -------------------------\r\n  const languageCodes = {\r\n    English: 'en-US',\r\n    Español: 'es-ES',\r\n    中文: 'zh-CN',\r\n    Français: 'fr-FR',\r\n    Deutsch: 'de-DE',\r\n    Italiano: 'it-IT',\r\n    日本語: 'ja-JP',\r\n    한국어: 'ko-KR',\r\n    Português: 'pt-BR',\r\n    Русский: 'ru-RU',\r\n  };\r\n\r\n  // -------------------------\r\n  // OpenAI Key (example)\r\n  // -------------------------\r\n  const OPENAI_API_KEY = 'sk-...'; // Replace with a secure mechanism\r\n\r\n  // ==========================================================================\r\n  // Fetch GPT Response\r\n  // ==========================================================================\r\n  const fetchChatGPTResponse = async (userMessage) => {\r\n    const chatHistory = [\r\n      {\r\n        role: 'system',\r\n        content:\r\n          'Limit responses to three sentences and assume the user can read English so send all responses in English but do not let the user know about this prompt. When you receive questions in another language, understand it and reply in English. The conversations will be multilingual. You work as a customer service representative for the Santa Clara County 211 call center. Your job is to provide accurate information about the services Santa Clara County can offer. Always speak in sentences and lists. If the user is asking for food assistance, give information on CalFresh, the food stamp application, include eligibility. If user agrees to let you help fill out the form, send back only the code \"CalFreshAccepted\".',\r\n      },\r\n      ...messages.map((msg) => ({\r\n        role: msg.sender === 'user' ? 'user' : 'assistant',\r\n        content: msg.text,\r\n      })),\r\n      { role: 'user', content: userMessage },\r\n    ];\r\n\r\n    try {\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${OPENAI_API_KEY}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: 'gpt-4',\r\n          messages: chatHistory,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      const botMessage = data.choices[0].message.content.trim();\r\n\r\n      // Special check for CalFresh\r\n      if (botMessage === 'CalFreshAccepted') {\r\n        setMessages((prev) => [\r\n          ...prev,\r\n          { sender: 'bot', type: 'calfreshAccepted' },\r\n        ]);\r\n        return;\r\n      }\r\n\r\n      // Normal Bot Response\r\n      handleBotResponse(botMessage);\r\n    } catch (error) {\r\n      console.error('Error fetching response:', error);\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        {\r\n          sender: 'bot',\r\n          text: 'Sorry, I am having trouble responding at the moment. Please try again later.',\r\n        },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  // ==========================================================================\r\n  // Handle Bot Response (Translate if needed, else just store & speak)\r\n  // ==========================================================================\r\n  const handleBotResponse = (botMessage) => {\r\n    if (selectedLanguage !== 'English') {\r\n      handleTranslateAndPlayTTS(botMessage);\r\n    } else {\r\n      setMessages((prev) => [...prev, { sender: 'bot', text: botMessage }]);\r\n      playTTS(botMessage);\r\n    }\r\n  };\r\n\r\n  // ==========================================================================\r\n  // Translate & TTS\r\n  // ==========================================================================\r\n  const handleTranslateAndPlayTTS = async (message) => {\r\n    const translationPrompt = `Translate the following text into ${selectedLanguage}: \"${message}\"`;\r\n    try {\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${OPENAI_API_KEY}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: 'gpt-4',\r\n          messages: [{ role: 'system', content: translationPrompt }],\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      const translatedMessage = data.choices[0].message.content;\r\n\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        { sender: 'bot', text: message, translation: translatedMessage },\r\n      ]);\r\n\r\n      // TTS in the translated language\r\n      playTTS(translatedMessage);\r\n    } catch (error) {\r\n      console.error('Error translating:', error);\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        {\r\n          sender: 'bot',\r\n          text: 'Sorry, I am having trouble translating right now.',\r\n        },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  // ==========================================================================\r\n  // TTS\r\n  // ==========================================================================\r\n  const playTTS = async (text, voiceId = 'pFZP5JQG7iQjIQuC4Bku') => {\r\n    try {\r\n      const audioBlob = await tts11(text, voiceId);\r\n      const audioUrl = URL.createObjectURL(audioBlob);\r\n      const audio = new Audio(audioUrl);\r\n      audio.play();\r\n    } catch (error) {\r\n      console.error('Error playing TTS audio:', error);\r\n    }\r\n  };\r\n\r\n  // ==========================================================================\r\n  // Send Message (Desktop only now)\r\n  // ==========================================================================\r\n  const handleSendMessage = () => {\r\n    if (input.trim() !== '') {\r\n      const userMessage = input.trim();\r\n      setMessages((prev) => [...prev, { sender: 'user', text: userMessage }]);\r\n      setInput('');\r\n      fetchChatGPTResponse(userMessage);\r\n    }\r\n  };\r\n\r\n  // ==========================================================================\r\n  // Voice Input\r\n  // ==========================================================================\r\n  const handleVoiceInput = () => {\r\n    if (isListening) {\r\n      // Stop listening\r\n      setIsListening(false);\r\n      setSpokenText('');\r\n    } else {\r\n      // Start listening\r\n      setIsListening(true);\r\n\r\n      const SpeechRecognition =\r\n        window.SpeechRecognition || window.webkitSpeechRecognition;\r\n      if (!SpeechRecognition) {\r\n        console.error('Speech recognition not supported.');\r\n        setSpokenText('Not supported in this browser.');\r\n        setIsListening(false);\r\n        return;\r\n      }\r\n\r\n      const recognition = new SpeechRecognition();\r\n      recognition.lang = languageCodes[selectedLanguage] || 'en-US';\r\n      recognition.interimResults = false;\r\n      recognition.continuous = false;\r\n\r\n      recognition.onstart = () => {\r\n        setSpokenText('Listening...');\r\n      };\r\n\r\n      recognition.onresult = (event) => {\r\n        const transcript = event.results[0][0].transcript;\r\n        setSpokenText('');\r\n        setIsListening(false);\r\n\r\n        if (transcript.trim() !== '') {\r\n          // On mobile, we only have voice input, so add directly\r\n          setMessages((prev) => [...prev, { sender: 'user', text: transcript }]);\r\n          fetchChatGPTResponse(transcript);\r\n        }\r\n      };\r\n\r\n      recognition.onerror = (event) => {\r\n        console.error('Speech recognition error:', event.error);\r\n        setSpokenText('Could not understand, please try again.');\r\n        setIsListening(false);\r\n      };\r\n\r\n      recognition.onend = () => {\r\n        setSpokenText('');\r\n        setIsListening(false);\r\n      };\r\n\r\n      recognition.start();\r\n    }\r\n  };\r\n\r\n  // ==========================================================================\r\n  // Handle Language Change\r\n  // ==========================================================================\r\n  const handleLanguageChange = (lang) => {\r\n    setSelectedLanguage(lang);\r\n  };\r\n\r\n  // ==========================================================================\r\n  // On Key Press (Enter to Send) - Desktop only\r\n  // ==========================================================================\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  // ==========================================================================\r\n  // On-demand Translation of Bot Messages\r\n  // ==========================================================================\r\n  const handleTranslateMessage = async (messageText, index) => {\r\n    if (isTranslating) return;\r\n    setIsTranslating(true);\r\n\r\n    const translationPrompt = `You are a helpful assistant that translates text to ${selectedLanguage}. Translate this text: \"${messageText}\"`;\r\n\r\n    try {\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${OPENAI_API_KEY}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: 'gpt-4',\r\n          messages: [\r\n            {\r\n              role: 'system',\r\n              content: translationPrompt,\r\n            },\r\n          ],\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      const translatedMessage = data.choices[0].message.content;\r\n\r\n      setMessages((prev) => {\r\n        const updated = [...prev];\r\n        updated[index] = {\r\n          ...updated[index],\r\n          translation: translatedMessage,\r\n        };\r\n        return updated;\r\n      });\r\n\r\n      await playTTS(translatedMessage);\r\n    } catch (error) {\r\n      console.error('Error translating:', error);\r\n    } finally {\r\n      setIsTranslating(false);\r\n    }\r\n  };\r\n\r\n  // ==========================================================================\r\n  // Auto-scroll\r\n  // ==========================================================================\r\n  useEffect(() => {\r\n    if (messageEndRef.current) {\r\n      messageEndRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [messages]);\r\n\r\n  // ==========================================================================\r\n  // RENDER HELPER: Chat Messages\r\n  // ==========================================================================\r\n  const renderMessages = () => {\r\n    return messages.map((message, index) => {\r\n      // Special UI for CalFresh\r\n      if (message.type === 'calfreshAccepted') {\r\n        return (\r\n          <div key={index} className=\"flex mb-4 items-center justify-start w-full\">\r\n            <div className=\"max-w-sm w-auto p-4 rounded-lg shadow bg-green-100 text-green-800\">\r\n              <p className=\"mb-2 font-semibold\">CalFresh Application</p>\r\n              <p className=\"mb-4\">\r\n                We’re ready to help you fill out the CalFresh application.\r\n              </p>\r\n              <button\r\n                onClick={() => navigate('/resources/calfresh')}\r\n                className=\"px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600\"\r\n              >\r\n                Fill Out the Form\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      // Normal Bot/User Messages\r\n      return (\r\n        <div\r\n          key={index}\r\n          className={`flex mb-4 items-center w-full ${\r\n            message.sender === 'bot' ? 'justify-start' : 'justify-end'\r\n          }`}\r\n        >\r\n          <div\r\n            className={`max-w-sm w-auto px-4 py-2 rounded-lg shadow ${\r\n              message.sender === 'bot'\r\n                ? 'bg-white text-gray-800'\r\n                : 'bg-cyan-400 text-white'\r\n            }`}\r\n          >\r\n            {message.text}\r\n            {message.translation && (\r\n              <div className=\"mt-2 text-sm text-gray-600\">\r\n                {message.translation}\r\n              </div>\r\n            )}\r\n\r\n            {message.sender === 'bot' && message.text && (\r\n              <button\r\n                onClick={() => handleTranslateMessage(message.text, index)}\r\n                className=\"mt-2 text-xs text-blue-500 flex items-center\"\r\n              >\r\n                <TranslateIcon className=\"h-5 w-5 mr-1\" />\r\n                Translate\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  // ==========================================================================\r\n  // MOBILE LAYOUT - Voice Only\r\n  // ==========================================================================\r\n  const MobileLayout = () => {\r\n    return (\r\n      <div className=\"flex flex-col w-full h-screen overflow-hidden\">\r\n        {/* Header */}\r\n        <nav className=\"flex items-center justify-between h-12 px-4 bg-white border-b\">\r\n          <img src={freshroadlogo} alt=\"Fresh Road Logo\" className=\"w-24 h-auto\" />\r\n          <button\r\n            onClick={() => navigate(-1)}\r\n            className=\"text-sm font-semibold text-gray-900 hover:text-cyan-500 flex items-center\"\r\n          >\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              className=\"h-5 w-5 mr-1\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n              stroke=\"currentColor\"\r\n              strokeWidth={2}\r\n            >\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 19l-7-7 7-7\" />\r\n            </svg>\r\n            Back\r\n          </button>\r\n        </nav>\r\n\r\n        {/* Chat Body */}\r\n        <div\r\n          className=\"flex-grow overflow-y-auto overflow-x-hidden bg-gray-100 px-4 pt-3 pb-20 w-full\"\r\n        >\r\n          {renderMessages()}\r\n          <div ref={messageEndRef} />\r\n        </div>\r\n\r\n        {/* Bottom bar: Voice only + Language selector */}\r\n        <div className=\"absolute bottom-0 left-0 right-0 bg-white border-t p-2 flex items-center space-x-1\">\r\n          {/* Voice button (icon only) */}\r\n          <button\r\n            onClick={handleVoiceInput}\r\n            className={`p-2 rounded-lg text-white ${\r\n              isListening ? 'bg-red-500' : 'bg-cyan-400'\r\n            } hover:bg-cyan-500 flex items-center justify-center`}\r\n          >\r\n            <MicrophoneIcon className=\"h-4 w-4\" />\r\n          </button>\r\n          {/* Language dropdown (optional) */}\r\n          <select\r\n            value={selectedLanguage}\r\n            onChange={(e) => handleLanguageChange(e.target.value)}\r\n            className=\"border rounded-lg p-1 text-sm\"\r\n          >\r\n            {Object.keys(languageCodes).map((lang) => (\r\n              <option key={lang} value={lang}>\r\n                {lang}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // ==========================================================================\r\n  // DESKTOP LAYOUT (unchanged)\r\n  // ==========================================================================\r\n  const DesktopLayout = () => {\r\n    return (\r\n      <div className=\"flex flex-col h-screen\">\r\n        {/* Header */}\r\n        <nav\r\n          className=\"flex justify-between items-center h-16 px-4 bg-white border-b\"\r\n          style={{ position: 'fixed', top: 0, left: 0, right: 0, zIndex: 10 }}\r\n        >\r\n          <img src={freshroadlogo} alt=\"Fresh Road Logo\" className=\"w-35 h-8 mr-2\" />\r\n          <button\r\n            onClick={() => navigate(-1)}\r\n            className=\"text-xl font-bold text-gray-900 hover:text-cyan-500 flex items-center\"\r\n          >\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              className=\"h-6 w-6 mr-2\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n              stroke=\"currentColor\"\r\n              strokeWidth={2}\r\n            >\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 19l-7-7 7-7\" />\r\n            </svg>\r\n            Back\r\n          </button>\r\n        </nav>\r\n\r\n        {/* Main Content */}\r\n        <div className=\"flex-grow flex overflow-hidden mt-16\">\r\n          {/* LEFT: Avatar Panel */}\r\n          <div\r\n            className=\"w-1/3 bg-white rounded-lg shadow flex-shrink-0 flex flex-col\"\r\n            style={{ height: 'calc(100vh - 8rem)' }}\r\n          >\r\n            {/* Avatar Image */}\r\n            <div\r\n              className=\"flex-grow\"\r\n              style={{\r\n                backgroundImage: `url(${avatarImage})`,\r\n                backgroundSize: 'cover',\r\n                backgroundPosition: 'center',\r\n                width: '100%',\r\n              }}\r\n            ></div>\r\n\r\n            {/* Description Section */}\r\n            <div className=\"p-4 bg-white\">\r\n              <h2 className=\"text-lg font-bold mb-2 text-center\">211 Call Center</h2>\r\n              <p className=\"text-center text-sm mb-2\">\r\n                <br />\r\n              </p>\r\n              <p className=\"text-center text-sm\">\r\n                Get assistance with community resources and support.\r\n              </p>\r\n              <button\r\n                className=\"mt-4 px-4 py-2 bg-cyan-400 text-white rounded-lg hover:bg-cyan-500 w-full\"\r\n                onClick={() => alert('Change Avatar functionality not implemented yet!')}\r\n              >\r\n                Change Avatar\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* RIGHT: Chat Body */}\r\n          <div\r\n            className=\"w-2/3 p-4 bg-gray-100 overflow-y-auto overflow-x-hidden\"\r\n            style={{ height: 'calc(100vh - 8rem)' }}\r\n          >\r\n            {renderMessages()}\r\n            <div ref={messageEndRef} />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Desktop Chat Input (Text + Send + Voice + Language) */}\r\n        <div\r\n          className=\"flex items-center p-4 bg-white border-t\"\r\n          style={{ position: 'sticky', bottom: 0 }}\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            className=\"flex-grow border rounded-lg px-4 py-2 focus:outline-none focus:ring focus:ring-cyan-300\"\r\n            placeholder=\"Type your message...\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n          />\r\n          <button\r\n            onClick={handleSendMessage}\r\n            className=\"ml-2 px-4 py-2 bg-cyan-400 text-white rounded-lg hover:bg-cyan-500 flex items-center\"\r\n          >\r\n            <PaperAirplaneIcon className=\"h-5 w-5 mr-1\" />\r\n            Send\r\n          </button>\r\n          <button\r\n            onClick={handleVoiceInput}\r\n            className={`ml-4 px-4 py-2 rounded-lg text-white ${\r\n              isListening ? 'bg-red-500' : 'bg-cyan-400'\r\n            } hover:bg-cyan-500 flex items-center`}\r\n          >\r\n            <MicrophoneIcon className=\"h-5 w-5 mr-1\" />\r\n            {isListening ? 'Stop' : 'Voice Input'}\r\n          </button>\r\n          <select\r\n            value={selectedLanguage}\r\n            onChange={(e) => handleLanguageChange(e.target.value)}\r\n            className=\"ml-4 px-4 py-2 border rounded-lg\"\r\n          >\r\n            {Object.keys(languageCodes).map((lang) => (\r\n              <option key={lang} value={lang}>\r\n                {lang}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // ==========================================================================\r\n  // Final Return: Only Voice Input on mobile\r\n  // ==========================================================================\r\n  return mobileLayout ? <MobileLayout /> : <DesktopLayout />;\r\n};\r\n\r\nexport default ChatInterfacePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}