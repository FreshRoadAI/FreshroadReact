{"ast":null,"code":"import axios from 'axios';\nconst base = 'https://api.elevenlabs.io/v1';\nconst headers = {\n  'Accept': 'audio/mpeg',\n  'Content-Type': 'application/json',\n  'xi-api-key': 'sk_a36cf48b18267cb52d1a861bda592227e582eec79e608500'\n};\nconst model = 'eleven_turbo_v2_5';\n\n/**\r\n * Function to interact with the ElevenLabs Text-to-Speech API.\r\n * @param {string} text - The text to convert to speech.\r\n * @param {string} voice - The voice ID to use for the TTS conversion.\r\n * @returns {Promise<Blob>} - Returns a Blob of the audio data.\r\n */\nexport const tts11 = async (text, voice) => {\n  try {\n    const response = await axios.post(`${base}/text-to-speech/${voice}`, {\n      model_id: model,\n      text: text,\n      voice_settings: {\n        stability: 0.15,\n        similarity_boost: 0.75\n      }\n    }, {\n      headers: headers,\n      responseType: 'arraybuffer'\n    });\n    return new Blob([response.data], {\n      type: 'audio/mpeg'\n    });\n  } catch (error) {\n    console.error('Error with ElevenLabs TTS API:', error);\n    throw new Error('Failed to fetch TTS audio.');\n  }\n};","map":{"version":3,"names":["axios","base","headers","model","tts11","text","voice","response","post","model_id","voice_settings","stability","similarity_boost","responseType","Blob","data","type","error","console","Error"],"sources":["C:/Users/allen/dev/FreshroadReact/src/api/elevenlabs.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst base = 'https://api.elevenlabs.io/v1';\r\nconst headers = {\r\n  'Accept': 'audio/mpeg',\r\n  'Content-Type': 'application/json',\r\n  'xi-api-key': 'sk_a36cf48b18267cb52d1a861bda592227e582eec79e608500',\r\n};\r\nconst model = 'eleven_turbo_v2_5';\r\n\r\n/**\r\n * Function to interact with the ElevenLabs Text-to-Speech API.\r\n * @param {string} text - The text to convert to speech.\r\n * @param {string} voice - The voice ID to use for the TTS conversion.\r\n * @returns {Promise<Blob>} - Returns a Blob of the audio data.\r\n */\r\nexport const tts11 = async (text, voice) => {\r\n  try {\r\n    const response = await axios.post(\r\n      `${base}/text-to-speech/${voice}`,\r\n      {\r\n        model_id: model,\r\n        text: text,\r\n        voice_settings: {\r\n          stability: 0.15,\r\n          similarity_boost: 0.75,\r\n        },\r\n      },\r\n      {\r\n        headers: headers,\r\n        responseType: 'arraybuffer',\r\n      }\r\n    );\r\n\r\n    return new Blob([response.data], { type: 'audio/mpeg' });\r\n  } catch (error) {\r\n    console.error('Error with ElevenLabs TTS API:', error);\r\n    throw new Error('Failed to fetch TTS audio.');\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,IAAI,GAAG,8BAA8B;AAC3C,MAAMC,OAAO,GAAG;EACd,QAAQ,EAAE,YAAY;EACtB,cAAc,EAAE,kBAAkB;EAClC,YAAY,EAAE;AAChB,CAAC;AACD,MAAMC,KAAK,GAAG,mBAAmB;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,KAAK;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAC/B,GAAGP,IAAI,mBAAmBK,KAAK,EAAE,EACjC;MACEG,QAAQ,EAAEN,KAAK;MACfE,IAAI,EAAEA,IAAI;MACVK,cAAc,EAAE;QACdC,SAAS,EAAE,IAAI;QACfC,gBAAgB,EAAE;MACpB;IACF,CAAC,EACD;MACEV,OAAO,EAAEA,OAAO;MAChBW,YAAY,EAAE;IAChB,CACF,CAAC;IAED,OAAO,IAAIC,IAAI,CAAC,CAACP,QAAQ,CAACQ,IAAI,CAAC,EAAE;MAAEC,IAAI,EAAE;IAAa,CAAC,CAAC;EAC1D,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAM,IAAIE,KAAK,CAAC,4BAA4B,CAAC;EAC/C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}