{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\allen\\\\dev\\\\FreshroadReact\\\\src\\\\pages\\\\Calfreshform.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../App.css';\nimport freshroadlogo from '../images/freshroadlogo.png';\nimport avatarImage from '../images/callrepai.png';\nimport { PaperAirplaneIcon, MicrophoneIcon, TranslateIcon, SpeakerWaveIcon } from '@heroicons/react/outline';\nimport { tts11 } from '../api/elevenlabs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatFormPage = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: 'bot',\n    text: \"I am here to help you fill out the Calfresh application. Please provide me with the necessary information to get started. Please provide me with your contact email address.\"\n  }]);\n  const [input, setInput] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const [spokenText, setSpokenText] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('English');\n  const [isTranslating, setIsTranslating] = useState(false);\n  const languageCodes = {\n    English: 'en-US',\n    Español: 'es-ES',\n    中文: 'zh-CN',\n    Français: 'fr-FR',\n    Deutsch: 'de-DE',\n    Italiano: 'it-IT',\n    日本語: 'ja-JP',\n    한국어: 'ko-KR',\n    Português: 'pt-BR',\n    Русский: 'ru-RU'\n  };\n  const fetchChatGPTResponse = async userMessage => {\n    const apiKey = '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'; // Replace with your actual API key\n    const chatHistory = [{\n      role: 'system',\n      content: 'You are a assistant that helps users fill out the Calfresh application. Ask one question at a time in this format. Save all the information and provide a Json response at the end. 1. What is your contact email address? 2. What is your full name? 3. What is your phone number? 4. What is your address? 5. Are you homeless yes or no? 6. Is your household’s gross income less than $150 and cash on hand, checking and savings accounts of $100 or less? Yes or No? 7. Have your utilities been shut off or do you have a shut-off notice? Yes or No? 8.Will your food run out in 3 days or less?  '\n    }, ...messages.map(msg => ({\n      role: msg.sender === 'user' ? 'user' : 'assistant',\n      content: msg.text\n    })), {\n      role: 'user',\n      content: userMessage\n    }];\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: 'gpt-4',\n          messages: chatHistory\n        })\n      });\n      const data = await response.json();\n      const botMessage = data.choices[0].message.content;\n      if (selectedLanguage !== 'English') {\n        handleTranslateAndPlayTTS(botMessage);\n      } else {\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: botMessage\n        }]);\n        playTTS(botMessage);\n      }\n    } catch (error) {\n      console.error('Error fetching response:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: 'Sorry, I am having trouble responding at the moment. Please try again later.'\n      }]);\n    }\n  };\n  const handleTranslateAndPlayTTS = async message => {\n    const apiKey = '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'; // Replace with your actual API key\n    const translationPrompt = `Translate the following text into ${selectedLanguage}: \"${message}\"`;\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: 'gpt-4',\n          messages: [{\n            role: 'system',\n            content: translationPrompt\n          }]\n        })\n      });\n      const data = await response.json();\n      const translatedMessage = data.choices[0].message.content;\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: message,\n        translation: translatedMessage\n      }]);\n      playTTS(translatedMessage); // Play only the translated message\n    } catch (error) {\n      console.error('Error translating message:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: 'Sorry, I am having trouble translating the response at the moment.'\n      }]);\n    }\n  };\n  const playTTS = async (text, voiceId = 'pFZP5JQG7iQjIQuC4Bku') => {\n    try {\n      const audioBlob = await tts11(text, voiceId); // Replace 'your_voice_id_here' with the appropriate voice ID\n      const audioUrl = URL.createObjectURL(audioBlob);\n      const audio = new Audio(audioUrl);\n      audio.play();\n    } catch (error) {\n      console.error('Error playing TTS audio:', error);\n    }\n  };\n  const handleSendMessage = () => {\n    if (input.trim() !== '') {\n      const userMessage = input.trim();\n      setMessages([...messages, {\n        sender: 'user',\n        text: userMessage\n      }]);\n      setInput('');\n      fetchChatGPTResponse(userMessage);\n    }\n  };\n  const handleVoiceInput = () => {\n    if (isListening) {\n      // Stop listening\n      setIsListening(false);\n      setSpokenText('');\n    } else {\n      // Start listening\n      setIsListening(true);\n\n      // Check if SpeechRecognition is supported\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      if (!SpeechRecognition) {\n        console.error('Speech recognition not supported in this browser.');\n        setSpokenText('Speech recognition is not supported in your browser.');\n        setIsListening(false);\n        return;\n      }\n      const recognition = new SpeechRecognition();\n      recognition.lang = languageCodes[selectedLanguage] || 'en-US';\n      recognition.interimResults = false; // Only final results\n      recognition.continuous = false; // Stop after one result\n\n      recognition.onstart = () => {\n        setSpokenText('Listening...');\n      };\n      recognition.onresult = event => {\n        const transcript = event.results[0][0].transcript;\n        setSpokenText('');\n        setIsListening(false);\n\n        // Automatically send the message\n        if (transcript.trim() !== '') {\n          setMessages(prevMessages => [...prevMessages, {\n            sender: 'user',\n            text: transcript.trim()\n          }]);\n          fetchChatGPTResponse(transcript.trim());\n        }\n      };\n      recognition.onerror = event => {\n        console.error('Speech recognition error:', event.error);\n        setSpokenText('Could not understand. Please try again.');\n        setIsListening(false);\n      };\n      recognition.onend = () => {\n        setSpokenText('');\n        setIsListening(false);\n      };\n      recognition.start();\n    }\n  };\n  const handleLanguageChange = language => {\n    setSelectedLanguage(language);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  const handleTranslateMessage = async (message, index) => {\n    if (isTranslating) return;\n    setIsTranslating(true);\n    const apiKey = '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';\n    const translationPrompt = `You are a helpful assistant that translates text to ${selectedLanguage}. Translate this text: \"${message}\"`;\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: 'gpt-4',\n          messages: [{\n            role: 'system',\n            content: translationPrompt\n          }]\n        })\n      });\n      const data = await response.json();\n      const translatedMessage = data.choices[0].message.content;\n      setMessages(prevMessages => {\n        const updatedMessages = [...prevMessages];\n        updatedMessages[index] = {\n          ...updatedMessages[index],\n          translation: translatedMessage\n        };\n        return updatedMessages;\n      });\n      await playTTS(translatedMessage, 'pFZP5JQG7iQjIQuC4Bku'); // Replace with the desired translation voice ID\n    } catch (error) {\n      console.error('Error translating message:', error);\n    } finally {\n      setIsTranslating(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100 flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"bg-white border-b w-full\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center h-16 px-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: freshroadlogo,\n          alt: \"Fresh Road Logo\",\n          className: \"w-35 h-8 mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-xl font-bold text-gray-900\",\n          children: \"Chat with Luna\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow p-4 overflow-y-auto w-full flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hidden sm:block mr-4\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: avatarImage,\n          alt: \"Chat Bot Avatar\",\n          className: \"w-16 h-16 rounded-full border border-gray-300\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-grow\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `flex ${message.sender === 'bot' ? 'justify-start' : 'justify-end'} mb-4 items-center`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `max-w-xs px-4 py-2 rounded-lg shadow ${message.sender === 'bot' ? 'bg-white text-gray-800' : 'bg-cyan-400 text-white'}`,\n            children: [message.text, message.translation && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-2 text-sm text-gray-600\",\n              children: message.translation\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleTranslateMessage(message.text, index),\n              className: \"mt-2 text-xs text-blue-500 flex items-center\",\n              children: /*#__PURE__*/_jsxDEV(TranslateIcon, {\n                className: \"h-5 w-5 mr-1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white border-t p-4 w-full\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center mb-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"flex-grow border rounded-lg px-4 py-2 focus:outline-none focus:ring focus:ring-cyan-300\",\n          placeholder: \"Type your message...\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyPress: handleKeyPress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          className: \"ml-2 px-4 py-2 bg-cyan-400 text-white rounded-lg hover:bg-cyan-500 flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(PaperAirplaneIcon, {\n            className: \"h-5 w-5 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this), \" Send\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleVoiceInput,\n          className: `ml-4 px-4 py-2 rounded-lg text-white ${isListening ? 'bg-red-500' : 'bg-cyan-400'} hover:bg-cyan-500 flex items-center`,\n          children: [/*#__PURE__*/_jsxDEV(MicrophoneIcon, {\n            className: \"h-5 w-5 mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this), \" \", isListening ? 'Stop' : 'Voice Input']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedLanguage,\n          onChange: e => handleLanguageChange(e.target.value),\n          className: \"ml-4 px-4 py-2 border rounded-lg flex items-center\",\n          children: Object.keys(languageCodes).map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: lang,\n            children: lang\n          }, lang, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatFormPage, \"6UIp3PI7HjxcMSu31f8XG8GrCeE=\");\n_c = ChatFormPage;\nexport default ChatFormPage;\nvar _c;\n$RefreshReg$(_c, \"ChatFormPage\");","map":{"version":3,"names":["React","useState","freshroadlogo","avatarImage","PaperAirplaneIcon","MicrophoneIcon","TranslateIcon","SpeakerWaveIcon","tts11","jsxDEV","_jsxDEV","ChatFormPage","_s","messages","setMessages","sender","text","input","setInput","isListening","setIsListening","spokenText","setSpokenText","selectedLanguage","setSelectedLanguage","isTranslating","setIsTranslating","languageCodes","English","Español","中文","Français","Deutsch","Italiano","日本語","한국어","Português","Русский","fetchChatGPTResponse","userMessage","apiKey","chatHistory","role","content","map","msg","response","fetch","method","headers","Authorization","body","JSON","stringify","model","data","json","botMessage","choices","message","handleTranslateAndPlayTTS","prevMessages","playTTS","error","console","translationPrompt","translatedMessage","translation","voiceId","audioBlob","audioUrl","URL","createObjectURL","audio","Audio","play","handleSendMessage","trim","handleVoiceInput","SpeechRecognition","window","webkitSpeechRecognition","recognition","lang","interimResults","continuous","onstart","onresult","event","transcript","results","onerror","onend","start","handleLanguageChange","language","handleKeyPress","e","key","handleTranslateMessage","index","updatedMessages","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","value","onChange","target","onKeyPress","Object","keys","_c","$RefreshReg$"],"sources":["C:/Users/allen/dev/FreshroadReact/src/pages/Calfreshform.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../App.css';\r\nimport freshroadlogo from '../images/freshroadlogo.png';\r\nimport avatarImage from '../images/callrepai.png';\r\nimport { PaperAirplaneIcon, MicrophoneIcon, TranslateIcon, SpeakerWaveIcon } from '@heroicons/react/outline';\r\nimport { tts11 } from '../api/elevenlabs';\r\n\r\nconst ChatFormPage = () => {\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      sender: 'bot',\r\n      text: \"I am here to help you fill out the Calfresh application. Please provide me with the necessary information to get started. Please provide me with your contact email address.\",\r\n    },\r\n  ]);\r\n  const [input, setInput] = useState('');\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [spokenText, setSpokenText] = useState('');\r\n  const [selectedLanguage, setSelectedLanguage] = useState('English');\r\n  const [isTranslating, setIsTranslating] = useState(false);\r\n\r\n  const languageCodes = {\r\n    English: 'en-US',\r\n    Español: 'es-ES',\r\n    中文: 'zh-CN',\r\n    Français: 'fr-FR',\r\n    Deutsch: 'de-DE',\r\n    Italiano: 'it-IT',\r\n    日本語: 'ja-JP',\r\n    한국어: 'ko-KR',\r\n    Português: 'pt-BR',\r\n    Русский: 'ru-RU',\r\n  };\r\n\r\n  const fetchChatGPTResponse = async (userMessage) => {\r\n    const apiKey = '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'; // Replace with your actual API key\r\n    const chatHistory = [\r\n      {\r\n        role: 'system',\r\n        content:\r\n          'You are a assistant that helps users fill out the Calfresh application. Ask one question at a time in this format. Save all the information and provide a Json response at the end. 1. What is your contact email address? 2. What is your full name? 3. What is your phone number? 4. What is your address? 5. Are you homeless yes or no? 6. Is your household’s gross income less than $150 and cash on hand, checking and savings accounts of $100 or less? Yes or No? 7. Have your utilities been shut off or do you have a shut-off notice? Yes or No? 8.Will your food run out in 3 days or less?  ',\r\n      },\r\n      ...messages.map((msg) => ({\r\n        role: msg.sender === 'user' ? 'user' : 'assistant',\r\n        content: msg.text,\r\n      })),\r\n      { role: 'user', content: userMessage },\r\n    ];\r\n  \r\n    try {\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: 'gpt-4',\r\n          messages: chatHistory,\r\n        }),\r\n      });\r\n  \r\n      const data = await response.json();\r\n      const botMessage = data.choices[0].message.content;\r\n  \r\n      if (selectedLanguage !== 'English') {\r\n        handleTranslateAndPlayTTS(botMessage);\r\n      } else {\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages,\r\n          { sender: 'bot', text: botMessage },\r\n        ]);\r\n        playTTS(botMessage);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching response:', error);\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: 'Sorry, I am having trouble responding at the moment. Please try again later.' },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const handleTranslateAndPlayTTS = async (message) => {\r\n    const apiKey = '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'; // Replace with your actual API key\r\n    const translationPrompt = `Translate the following text into ${selectedLanguage}: \"${message}\"`;\r\n  \r\n    try {\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: 'gpt-4',\r\n          messages: [\r\n            { role: 'system', content: translationPrompt },\r\n          ],\r\n        }),\r\n      });\r\n  \r\n      const data = await response.json();\r\n      const translatedMessage = data.choices[0].message.content;\r\n  \r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: message, translation: translatedMessage },\r\n      ]);\r\n  \r\n      playTTS(translatedMessage); // Play only the translated message\r\n    } catch (error) {\r\n      console.error('Error translating message:', error);\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: 'Sorry, I am having trouble translating the response at the moment.' },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const playTTS = async (text, voiceId = 'pFZP5JQG7iQjIQuC4Bku') => {\r\n    try {\r\n      const audioBlob = await tts11(text, voiceId); // Replace 'your_voice_id_here' with the appropriate voice ID\r\n      const audioUrl = URL.createObjectURL(audioBlob);\r\n      const audio = new Audio(audioUrl);\r\n      audio.play();\r\n    } catch (error) {\r\n      console.error('Error playing TTS audio:', error);\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = () => {\r\n    if (input.trim() !== '') {\r\n      const userMessage = input.trim();\r\n      setMessages([...messages, { sender: 'user', text: userMessage }]);\r\n      setInput('');\r\n      fetchChatGPTResponse(userMessage);\r\n    }\r\n  };\r\n\r\n  const handleVoiceInput = () => {\r\n    if (isListening) {\r\n      // Stop listening\r\n      setIsListening(false);\r\n      setSpokenText('');\r\n    } else {\r\n      // Start listening\r\n      setIsListening(true);\r\n  \r\n      // Check if SpeechRecognition is supported\r\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n      if (!SpeechRecognition) {\r\n        console.error('Speech recognition not supported in this browser.');\r\n        setSpokenText('Speech recognition is not supported in your browser.');\r\n        setIsListening(false);\r\n        return;\r\n      }\r\n  \r\n      const recognition = new SpeechRecognition();\r\n      recognition.lang = languageCodes[selectedLanguage] || 'en-US';\r\n      recognition.interimResults = false; // Only final results\r\n      recognition.continuous = false; // Stop after one result\r\n  \r\n      recognition.onstart = () => {\r\n        setSpokenText('Listening...');\r\n      };\r\n  \r\n      recognition.onresult = (event) => {\r\n        const transcript = event.results[0][0].transcript;\r\n        setSpokenText('');\r\n        setIsListening(false);\r\n  \r\n        // Automatically send the message\r\n        if (transcript.trim() !== '') {\r\n          setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { sender: 'user', text: transcript.trim() },\r\n          ]);\r\n          fetchChatGPTResponse(transcript.trim());\r\n        }\r\n      };\r\n  \r\n      recognition.onerror = (event) => {\r\n        console.error('Speech recognition error:', event.error);\r\n        setSpokenText('Could not understand. Please try again.');\r\n        setIsListening(false);\r\n      };\r\n  \r\n      recognition.onend = () => {\r\n        setSpokenText('');\r\n        setIsListening(false);\r\n      };\r\n  \r\n      recognition.start();\r\n    }\r\n  };\r\n\r\n  const handleLanguageChange = (language) => {\r\n    setSelectedLanguage(language);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  const handleTranslateMessage = async (message, index) => {\r\n    if (isTranslating) return;\r\n    setIsTranslating(true);\r\n\r\n    const apiKey = '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';\r\n    const translationPrompt = `You are a helpful assistant that translates text to ${selectedLanguage}. Translate this text: \"${message}\"`;\r\n\r\n    try {\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: 'gpt-4',\r\n          messages: [\r\n            {\r\n              role: 'system',\r\n              content: translationPrompt,\r\n            },\r\n          ],\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      const translatedMessage = data.choices[0].message.content;\r\n\r\n      setMessages((prevMessages) => {\r\n        const updatedMessages = [...prevMessages];\r\n        updatedMessages[index] = {\r\n          ...updatedMessages[index],\r\n          translation: translatedMessage,\r\n        };\r\n        return updatedMessages;\r\n      });\r\n      await playTTS(translatedMessage, 'pFZP5JQG7iQjIQuC4Bku'); // Replace with the desired translation voice ID\r\n    } catch (error) {\r\n      console.error('Error translating message:', error);\r\n    } finally {\r\n      setIsTranslating(false);\r\n    }\r\n  };\r\n\r\n\r\n  \r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100 flex flex-col\">\r\n      {/* Header */}\r\n      <nav className=\"bg-white border-b w-full\">\r\n        <div className=\"flex justify-between items-center h-16 px-4\">\r\n          <img src={freshroadlogo} alt=\"Fresh Road Logo\" className=\"w-35 h-8 mr-2\" />\r\n          <h1 className=\"text-xl font-bold text-gray-900\">Chat with Luna</h1>\r\n        </div>\r\n      </nav>\r\n\r\n      {/* Chat Body */}\r\n      <div className=\"flex-grow p-4 overflow-y-auto w-full flex\">\r\n        {/* Avatar Section */}\r\n        <div className=\"hidden sm:block mr-4\">\r\n          <img\r\n            src={avatarImage}\r\n            alt=\"Chat Bot Avatar\"\r\n            className=\"w-16 h-16 rounded-full border border-gray-300\"\r\n          />\r\n        </div>\r\n\r\n        {/* Messages Section */}\r\n        <div className=\"flex-grow\">\r\n          {messages.map((message, index) => (\r\n            <div\r\n              key={index}\r\n              className={`flex ${message.sender === 'bot' ? 'justify-start' : 'justify-end'} mb-4 items-center`}\r\n            >\r\n              <div\r\n                className={`max-w-xs px-4 py-2 rounded-lg shadow ${\r\n                  message.sender === 'bot' ? 'bg-white text-gray-800' : 'bg-cyan-400 text-white'\r\n                }`}\r\n              >\r\n                {message.text}\r\n                {message.translation && (\r\n                  <div className=\"mt-2 text-sm text-gray-600\">{message.translation}</div>\r\n                )}\r\n                <button\r\n                  onClick={() => handleTranslateMessage(message.text, index)}\r\n                  className=\"mt-2 text-xs text-blue-500 flex items-center\"\r\n                >\r\n                  <TranslateIcon className=\"h-5 w-5 mr-1\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Chat Input */}\r\n      <div className=\"bg-white border-t p-4 w-full\">\r\n        <div className=\"flex items-center mb-2\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"flex-grow border rounded-lg px-4 py-2 focus:outline-none focus:ring focus:ring-cyan-300\"\r\n            placeholder=\"Type your message...\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n          />\r\n          <button\r\n            onClick={handleSendMessage}\r\n            className=\"ml-2 px-4 py-2 bg-cyan-400 text-white rounded-lg hover:bg-cyan-500 flex items-center\"\r\n          >\r\n            <PaperAirplaneIcon className=\"h-5 w-5 mr-1\" /> Send\r\n          </button>\r\n          <button\r\n            onClick={handleVoiceInput}\r\n            className={`ml-4 px-4 py-2 rounded-lg text-white ${isListening ? 'bg-red-500' : 'bg-cyan-400'} hover:bg-cyan-500 flex items-center`}\r\n          >\r\n            <MicrophoneIcon className=\"h-5 w-5 mr-1\" /> {isListening ? 'Stop' : 'Voice Input'}\r\n          </button>\r\n          <select\r\n            value={selectedLanguage}\r\n            onChange={(e) => handleLanguageChange(e.target.value)}\r\n            className=\"ml-4 px-4 py-2 border rounded-lg flex items-center\"\r\n          >\r\n            {Object.keys(languageCodes).map((lang) => (\r\n              <option key={lang} value={lang}>\r\n                {lang}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatFormPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}