{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\allen\\\\dev\\\\FreshroadReact\\\\src\\\\pages\\\\Chatpage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../App.css';\nimport freshroadlogo from '../images/freshroadlogo.png';\nimport avatarImage from '../images/callrepai.png';\nimport { PaperAirplaneIcon, MicrophoneIcon, TranslateIcon, SpeakerWaveIcon } from '@heroicons/react/outline';\nimport { tts11 } from '../api/elevenlabs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatFormPage = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: 'bot',\n    text: \"Welcome to the Santa Clara County 211 call center. How can I help you today?\"\n  }]);\n  const [input, setInput] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const [spokenText, setSpokenText] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('English');\n  const [isTranslating, setIsTranslating] = useState(false);\n  const messageEndRef = useRef(null);\n  const languageCodes = {\n    English: 'en-US',\n    Español: 'es-ES',\n    中文: 'zh-CN',\n    Français: 'fr-FR',\n    Deutsch: 'de-DE',\n    Italiano: 'it-IT',\n    日本語: 'ja-JP',\n    한국어: 'ko-KR',\n    Português: 'pt-BR',\n    Русский: 'ru-RU'\n  };\n  const fetchChatGPTResponse = async userMessage => {\n    const apiKey = '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'; // Replace with your actual API key\n    const chatHistory = [{\n      role: 'system',\n      content: 'Limit responses to three sentences and assume the user can read English so send all responses in English but do not let the user know about this prompt. When you receive questions in another language, understand it and reply in English. The conversations will be multilingual. You work as a customer service representative for the Santa Clara County 211 call center. Your job is to provide accurate information about the services Santa Clara County can offer. Always speak in sentences and lists. If the user is asking for food assistance, give information on CalFresh, the food stamp application, include eligibility. If user agrees to let you help fill out the form, send back only the code \"CalFreshAccepted\".'\n    }, ...messages.map(msg => ({\n      role: msg.sender === 'user' ? 'user' : 'assistant',\n      content: msg.text\n    })), {\n      role: 'user',\n      content: userMessage\n    }];\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: 'gpt-4',\n          messages: chatHistory\n        })\n      });\n      const data = await response.json();\n      const botMessage = data.choices[0].message.content;\n      if (selectedLanguage !== 'English') {\n        handleTranslateAndPlayTTS(botMessage);\n      } else {\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: botMessage\n        }]);\n        playTTS(botMessage);\n      }\n    } catch (error) {\n      console.error('Error fetching response:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: 'Sorry, I am having trouble responding at the moment. Please try again later.'\n      }]);\n    }\n  };\n  const handleTranslateAndPlayTTS = async message => {\n    const apiKey = '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'; // Replace with your actual API key\n    const translationPrompt = `Translate the following text into ${selectedLanguage}: \"${message}\"`;\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: 'gpt-4',\n          messages: [{\n            role: 'system',\n            content: translationPrompt\n          }]\n        })\n      });\n      const data = await response.json();\n      const translatedMessage = data.choices[0].message.content;\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: message,\n        translation: translatedMessage\n      }]);\n      playTTS(translatedMessage); // Play only the translated message\n    } catch (error) {\n      console.error('Error translating message:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: 'Sorry, I am having trouble translating the response at the moment.'\n      }]);\n    }\n  };\n  useEffect(() => {\n    if (messageEndRef.current) {\n      messageEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [messages]); // Run whenever the messages array updates\n\n  const playTTS = async (text, voiceId = 'pFZP5JQG7iQjIQuC4Bku') => {\n    try {\n      const audioBlob = await tts11(text, voiceId); // Replace 'your_voice_id_here' with the appropriate voice ID\n      const audioUrl = URL.createObjectURL(audioBlob);\n      const audio = new Audio(audioUrl);\n      audio.play();\n    } catch (error) {\n      console.error('Error playing TTS audio:', error);\n    }\n  };\n  const handleSendMessage = () => {\n    if (input.trim() !== '') {\n      const userMessage = input.trim();\n      setMessages([...messages, {\n        sender: 'user',\n        text: userMessage\n      }]);\n      setInput('');\n      fetchChatGPTResponse(userMessage);\n    }\n  };\n  const handleVoiceInput = () => {\n    if (isListening) {\n      // Stop listening\n      setIsListening(false);\n      setSpokenText('');\n    } else {\n      // Start listening\n      setIsListening(true);\n\n      // Check if SpeechRecognition is supported\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      if (!SpeechRecognition) {\n        console.error('Speech recognition not supported in this browser.');\n        setSpokenText('Speech recognition is not supported in your browser.');\n        setIsListening(false);\n        return;\n      }\n      const recognition = new SpeechRecognition();\n      recognition.lang = languageCodes[selectedLanguage] || 'en-US';\n      recognition.interimResults = false; // Only final results\n      recognition.continuous = false; // Stop after one result\n\n      recognition.onstart = () => {\n        setSpokenText('Listening...');\n      };\n      recognition.onresult = event => {\n        const transcript = event.results[0][0].transcript;\n        setSpokenText('');\n        setIsListening(false);\n\n        // Automatically send the message\n        if (transcript.trim() !== '') {\n          setMessages(prevMessages => [...prevMessages, {\n            sender: 'user',\n            text: transcript.trim()\n          }]);\n          fetchChatGPTResponse(transcript.trim());\n        }\n      };\n      recognition.onerror = event => {\n        console.error('Speech recognition error:', event.error);\n        setSpokenText('Could not understand. Please try again.');\n        setIsListening(false);\n      };\n      recognition.onend = () => {\n        setSpokenText('');\n        setIsListening(false);\n      };\n      recognition.start();\n    }\n  };\n  const handleLanguageChange = language => {\n    setSelectedLanguage(language);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  const handleTranslateMessage = async (message, index) => {\n    if (isTranslating) return;\n    setIsTranslating(true);\n    const apiKey = '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';\n    const translationPrompt = `You are a helpful assistant that translates text to ${selectedLanguage}. Translate this text: \"${message}\"`;\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: 'gpt-4',\n          messages: [{\n            role: 'system',\n            content: translationPrompt\n          }]\n        })\n      });\n      const data = await response.json();\n      const translatedMessage = data.choices[0].message.content;\n      setMessages(prevMessages => {\n        const updatedMessages = [...prevMessages];\n        updatedMessages[index] = {\n          ...updatedMessages[index],\n          translation: translatedMessage\n        };\n        return updatedMessages;\n      });\n      await playTTS(translatedMessage, 'pFZP5JQG7iQjIQuC4Bku'); // Replace with the desired translation voice ID\n    } catch (error) {\n      console.error('Error translating message:', error);\n    } finally {\n      setIsTranslating(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"flex justify-between items-center h-16 px-4 bg-white border-b\",\n      style: {\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        zIndex: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: freshroadlogo,\n        alt: \"Fresh Road Logo\",\n        className: \"w-35 h-8 mr-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl font-bold text-gray-900\",\n        children: \"Chat with Luna\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow flex overflow-hidden mt-16\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-1/3 bg-white p-4 rounded-lg shadow flex-shrink-0\",\n        style: {\n          height: 'calc(100vh - 8rem)'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-bold mb-2\",\n          children: \"New Feature\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This section remains fixed and doesn't scroll.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-2/3 p-4 bg-gray-100 overflow-y-auto\",\n        style: {\n          height: 'calc(100vh - 8rem)'\n        },\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `flex mb-4 items-center ${message.sender === 'bot' ? 'justify-start' : 'justify-end'}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `max-w-xs px-4 py-2 rounded-lg shadow ${message.sender === 'bot' ? 'bg-white text-gray-800' : 'bg-cyan-400 text-white'}`,\n            children: [message.text, message.translation && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-2 text-sm text-gray-600\",\n              children: message.translation\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 11\n            }, this), message.sender === 'bot' && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleTranslateMessage(message.text, index),\n              className: \"mt-2 text-xs text-blue-500 flex items-center\",\n              children: [/*#__PURE__*/_jsxDEV(TranslateIcon, {\n                className: \"h-5 w-5 mr-1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 13\n              }, this), \"Translate\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 7\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 5\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messageEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center p-4 bg-white border-t\",\n      style: {\n        position: 'sticky',\n        bottom: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"flex-grow border rounded-lg px-4 py-2 focus:outline-none focus:ring focus:ring-cyan-300\",\n        placeholder: \"Type your message...\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleKeyPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"ml-2 px-4 py-2 bg-cyan-400 text-white rounded-lg hover:bg-cyan-500 flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(PaperAirplaneIcon, {\n          className: \"h-5 w-5 mr-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 9\n        }, this), \" Send\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleVoiceInput,\n        className: `ml-4 px-4 py-2 rounded-lg text-white ${isListening ? 'bg-red-500' : 'bg-cyan-400'} hover:bg-cyan-500 flex items-center`,\n        children: [/*#__PURE__*/_jsxDEV(MicrophoneIcon, {\n          className: \"h-5 w-5 mr-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 9\n        }, this), ' ', isListening ? 'Stop' : 'Voice Input']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedLanguage,\n        onChange: e => handleLanguageChange(e.target.value),\n        className: \"ml-4 px-4 py-2 border rounded-lg\",\n        children: Object.keys(languageCodes).map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: lang,\n          children: lang\n        }, lang, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatFormPage, \"Yfc5/58knjn6zME3IUrcTWFF8Cg=\");\n_c = ChatFormPage;\nexport default ChatFormPage;\nvar _c;\n$RefreshReg$(_c, \"ChatFormPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","freshroadlogo","avatarImage","PaperAirplaneIcon","MicrophoneIcon","TranslateIcon","SpeakerWaveIcon","tts11","jsxDEV","_jsxDEV","ChatFormPage","_s","messages","setMessages","sender","text","input","setInput","isListening","setIsListening","spokenText","setSpokenText","selectedLanguage","setSelectedLanguage","isTranslating","setIsTranslating","messageEndRef","languageCodes","English","Español","中文","Français","Deutsch","Italiano","日本語","한국어","Português","Русский","fetchChatGPTResponse","userMessage","apiKey","chatHistory","role","content","map","msg","response","fetch","method","headers","Authorization","body","JSON","stringify","model","data","json","botMessage","choices","message","handleTranslateAndPlayTTS","prevMessages","playTTS","error","console","translationPrompt","translatedMessage","translation","current","scrollIntoView","behavior","voiceId","audioBlob","audioUrl","URL","createObjectURL","audio","Audio","play","handleSendMessage","trim","handleVoiceInput","SpeechRecognition","window","webkitSpeechRecognition","recognition","lang","interimResults","continuous","onstart","onresult","event","transcript","results","onerror","onend","start","handleLanguageChange","language","handleKeyPress","e","key","handleTranslateMessage","index","updatedMessages","className","children","style","position","top","left","right","zIndex","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","height","onClick","ref","bottom","type","placeholder","value","onChange","target","onKeyPress","Object","keys","_c","$RefreshReg$"],"sources":["C:/Users/allen/dev/FreshroadReact/src/pages/Chatpage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport '../App.css';\r\nimport freshroadlogo from '../images/freshroadlogo.png';\r\nimport avatarImage from '../images/callrepai.png';\r\nimport { PaperAirplaneIcon, MicrophoneIcon, TranslateIcon, SpeakerWaveIcon } from '@heroicons/react/outline';\r\nimport { tts11 } from '../api/elevenlabs';\r\n\r\n\r\n\r\nconst ChatFormPage = () => {\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      sender: 'bot',\r\n      text: \"Welcome to the Santa Clara County 211 call center. How can I help you today?\",\r\n    },\r\n  ]);\r\n  const [input, setInput] = useState('');\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [spokenText, setSpokenText] = useState('');\r\n  const [selectedLanguage, setSelectedLanguage] = useState('English');\r\n  const [isTranslating, setIsTranslating] = useState(false);\r\n  const messageEndRef = useRef(null);\r\n\r\n  \r\n\r\n\r\n  const languageCodes = {\r\n    English: 'en-US',\r\n    Español: 'es-ES',\r\n    中文: 'zh-CN',\r\n    Français: 'fr-FR',\r\n    Deutsch: 'de-DE',\r\n    Italiano: 'it-IT',\r\n    日本語: 'ja-JP',\r\n    한국어: 'ko-KR',\r\n    Português: 'pt-BR',\r\n    Русский: 'ru-RU',\r\n  };\r\n\r\n  const fetchChatGPTResponse = async (userMessage) => {\r\n    const apiKey = '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'; // Replace with your actual API key\r\n    const chatHistory = [\r\n      {\r\n        role: 'system',\r\n        content:\r\n          'Limit responses to three sentences and assume the user can read English so send all responses in English but do not let the user know about this prompt. When you receive questions in another language, understand it and reply in English. The conversations will be multilingual. You work as a customer service representative for the Santa Clara County 211 call center. Your job is to provide accurate information about the services Santa Clara County can offer. Always speak in sentences and lists. If the user is asking for food assistance, give information on CalFresh, the food stamp application, include eligibility. If user agrees to let you help fill out the form, send back only the code \"CalFreshAccepted\".',\r\n      },\r\n      ...messages.map((msg) => ({\r\n        role: msg.sender === 'user' ? 'user' : 'assistant',\r\n        content: msg.text,\r\n      })),\r\n      { role: 'user', content: userMessage },\r\n    ];\r\n\r\n    try {\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: 'gpt-4',\r\n          messages: chatHistory,\r\n        }),\r\n      });\r\n  \r\n      const data = await response.json();\r\n      const botMessage = data.choices[0].message.content;\r\n  \r\n      if (selectedLanguage !== 'English') {\r\n        handleTranslateAndPlayTTS(botMessage);\r\n      } else {\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages,\r\n          { sender: 'bot', text: botMessage },\r\n        ]);\r\n        playTTS(botMessage);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching response:', error);\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: 'Sorry, I am having trouble responding at the moment. Please try again later.' },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const handleTranslateAndPlayTTS = async (message) => {\r\n    const apiKey = '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'; // Replace with your actual API key\r\n    const translationPrompt = `Translate the following text into ${selectedLanguage}: \"${message}\"`;\r\n  \r\n    try {\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: 'gpt-4',\r\n          messages: [\r\n            { role: 'system', content: translationPrompt },\r\n          ],\r\n        }),\r\n      });\r\n  \r\n      const data = await response.json();\r\n      const translatedMessage = data.choices[0].message.content;\r\n  \r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: message, translation: translatedMessage },\r\n      ]);\r\n  \r\n      playTTS(translatedMessage); // Play only the translated message\r\n    } catch (error) {\r\n      console.error('Error translating message:', error);\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: 'Sorry, I am having trouble translating the response at the moment.' },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (messageEndRef.current) {\r\n      messageEndRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [messages]); // Run whenever the messages array updates\r\n\r\n  const playTTS = async (text, voiceId = 'pFZP5JQG7iQjIQuC4Bku') => {\r\n    try {\r\n      const audioBlob = await tts11(text, voiceId); // Replace 'your_voice_id_here' with the appropriate voice ID\r\n      const audioUrl = URL.createObjectURL(audioBlob);\r\n      const audio = new Audio(audioUrl);\r\n      audio.play();\r\n    } catch (error) {\r\n      console.error('Error playing TTS audio:', error);\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = () => {\r\n    if (input.trim() !== '') {\r\n      const userMessage = input.trim();\r\n      setMessages([...messages, { sender: 'user', text: userMessage }]);\r\n      setInput('');\r\n      fetchChatGPTResponse(userMessage);\r\n    }\r\n  };\r\n\r\n  const handleVoiceInput = () => {\r\n    if (isListening) {\r\n      // Stop listening\r\n      setIsListening(false);\r\n      setSpokenText('');\r\n    } else {\r\n      // Start listening\r\n      setIsListening(true);\r\n  \r\n      // Check if SpeechRecognition is supported\r\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n      if (!SpeechRecognition) {\r\n        console.error('Speech recognition not supported in this browser.');\r\n        setSpokenText('Speech recognition is not supported in your browser.');\r\n        setIsListening(false);\r\n        return;\r\n      }\r\n  \r\n      const recognition = new SpeechRecognition();\r\n      recognition.lang = languageCodes[selectedLanguage] || 'en-US';\r\n      recognition.interimResults = false; // Only final results\r\n      recognition.continuous = false; // Stop after one result\r\n  \r\n      recognition.onstart = () => {\r\n        setSpokenText('Listening...');\r\n      };\r\n  \r\n      recognition.onresult = (event) => {\r\n        const transcript = event.results[0][0].transcript;\r\n        setSpokenText('');\r\n        setIsListening(false);\r\n  \r\n        // Automatically send the message\r\n        if (transcript.trim() !== '') {\r\n          setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { sender: 'user', text: transcript.trim() },\r\n          ]);\r\n          fetchChatGPTResponse(transcript.trim());\r\n        }\r\n      };\r\n  \r\n      recognition.onerror = (event) => {\r\n        console.error('Speech recognition error:', event.error);\r\n        setSpokenText('Could not understand. Please try again.');\r\n        setIsListening(false);\r\n      };\r\n  \r\n      recognition.onend = () => {\r\n        setSpokenText('');\r\n        setIsListening(false);\r\n      };\r\n  \r\n      recognition.start();\r\n    }\r\n  };\r\n\r\n  const handleLanguageChange = (language) => {\r\n    setSelectedLanguage(language);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  const handleTranslateMessage = async (message, index) => {\r\n    if (isTranslating) return;\r\n    setIsTranslating(true);\r\n\r\n    const apiKey = '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';\r\n    const translationPrompt = `You are a helpful assistant that translates text to ${selectedLanguage}. Translate this text: \"${message}\"`;\r\n\r\n    try {\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: 'gpt-4',\r\n          messages: [\r\n            {\r\n              role: 'system',\r\n              content: translationPrompt,\r\n            },\r\n          ],\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      const translatedMessage = data.choices[0].message.content;\r\n\r\n      setMessages((prevMessages) => {\r\n        const updatedMessages = [...prevMessages];\r\n        updatedMessages[index] = {\r\n          ...updatedMessages[index],\r\n          translation: translatedMessage,\r\n        };\r\n        return updatedMessages;\r\n      });\r\n      await playTTS(translatedMessage, 'pFZP5JQG7iQjIQuC4Bku'); // Replace with the desired translation voice ID\r\n    } catch (error) {\r\n      console.error('Error translating message:', error);\r\n    } finally {\r\n      setIsTranslating(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-screen\">\r\n    {/* Header */}\r\n    <nav\r\n      className=\"flex justify-between items-center h-16 px-4 bg-white border-b\"\r\n      style={{ position: 'fixed', top: 0, left: 0, right: 0, zIndex: 10 }}\r\n    >\r\n      <img src={freshroadlogo} alt=\"Fresh Road Logo\" className=\"w-35 h-8 mr-2\" />\r\n      <h1 className=\"text-xl font-bold text-gray-900\">Chat with Luna</h1>\r\n    </nav>\r\n  \r\n    {/* Main Content */}\r\n    <div\r\n      className=\"flex-grow flex overflow-hidden mt-16\"\r\n    >\r\n      {/* Feature Section */}\r\n      <div\r\n        className=\"w-1/3 bg-white p-4 rounded-lg shadow flex-shrink-0\"\r\n        style={{ height: 'calc(100vh - 8rem)' }}\r\n      >\r\n        <h2 className=\"text-lg font-bold mb-2\">New Feature</h2>\r\n        <p>This section remains fixed and doesn't scroll.</p>\r\n        {/* Add feature content here */}\r\n      </div>\r\n  \r\n     {/* Chat Body */}\r\n<div\r\n  className=\"w-2/3 p-4 bg-gray-100 overflow-y-auto\"\r\n  style={{ height: 'calc(100vh - 8rem)' }}\r\n>\r\n  {messages.map((message, index) => (\r\n    <div\r\n      key={index}\r\n      className={`flex mb-4 items-center ${\r\n        message.sender === 'bot' ? 'justify-start' : 'justify-end'\r\n      }`}\r\n    >\r\n      {/* Avatar Section */}\r\n      {/* {message.sender === 'bot' && (\r\n        <div className=\"hidden sm:block mr-4\">\r\n          <img\r\n            src={avatarImage}\r\n            alt=\"Chat Bot Avatar\"\r\n            className=\"w-16 h-16 rounded-full border border-gray-300\"\r\n          />\r\n        </div>\r\n      )} */}\r\n      {/* Message Section */}\r\n      <div\r\n        className={`max-w-xs px-4 py-2 rounded-lg shadow ${\r\n          message.sender === 'bot'\r\n            ? 'bg-white text-gray-800'\r\n            : 'bg-cyan-400 text-white'\r\n        }`}\r\n      >\r\n        {message.text}\r\n        {message.translation && (\r\n          <div className=\"mt-2 text-sm text-gray-600\">\r\n            {message.translation}\r\n          </div>\r\n        )}\r\n        {message.sender === 'bot' && (\r\n          <button\r\n            onClick={() => handleTranslateMessage(message.text, index)}\r\n            className=\"mt-2 text-xs text-blue-500 flex items-center\"\r\n          >\r\n            <TranslateIcon className=\"h-5 w-5 mr-1\" />\r\n            Translate\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  ))}\r\n  {/* Auto-Scroll Target */}\r\n  <div ref={messageEndRef} />\r\n</div>\r\n    </div>\r\n  \r\n    {/* Chat Input */}\r\n    <div\r\n      className=\"flex items-center p-4 bg-white border-t\"\r\n      style={{ position: 'sticky', bottom: 0 }}\r\n    >\r\n      <input\r\n        type=\"text\"\r\n        className=\"flex-grow border rounded-lg px-4 py-2 focus:outline-none focus:ring focus:ring-cyan-300\"\r\n        placeholder=\"Type your message...\"\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        onKeyPress={handleKeyPress}\r\n      />\r\n      <button\r\n        onClick={handleSendMessage}\r\n        className=\"ml-2 px-4 py-2 bg-cyan-400 text-white rounded-lg hover:bg-cyan-500 flex items-center\"\r\n      >\r\n        <PaperAirplaneIcon className=\"h-5 w-5 mr-1\" /> Send\r\n      </button>\r\n      <button\r\n        onClick={handleVoiceInput}\r\n        className={`ml-4 px-4 py-2 rounded-lg text-white ${\r\n          isListening ? 'bg-red-500' : 'bg-cyan-400'\r\n        } hover:bg-cyan-500 flex items-center`}\r\n      >\r\n        <MicrophoneIcon className=\"h-5 w-5 mr-1\" />{' '}\r\n        {isListening ? 'Stop' : 'Voice Input'}\r\n      </button>\r\n      <select\r\n        value={selectedLanguage}\r\n        onChange={(e) => handleLanguageChange(e.target.value)}\r\n        className=\"ml-4 px-4 py-2 border rounded-lg\"\r\n      >\r\n        {Object.keys(languageCodes).map((lang) => (\r\n          <option key={lang} value={lang}>\r\n            {lang}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  </div>\r\n  \r\n  );\r\n};\r\n\r\nexport default ChatFormPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}