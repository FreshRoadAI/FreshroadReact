{"ast":null,"code":"import _objectSpread from\"C:/Users/allen/dev/FreshroadReact/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState}from'react';import'../App.css';import freshroadlogo from'../images/freshroadlogo.png';import avatarImage from'../images/callrepai.png';import{PaperAirplaneIcon,MicrophoneIcon,TranslateIcon,SpeakerWaveIcon}from'@heroicons/react/outline';import{tts11}from'../api/elevenlabs';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ChatInterfacePage=()=>{const[messages,setMessages]=useState([{sender:'bot',text:\"Welcome to the Santa Clara County 211 call center. How can I help you today?\"}]);const[input,setInput]=useState('');const[isListening,setIsListening]=useState(false);const[spokenText,setSpokenText]=useState('');const[selectedLanguage,setSelectedLanguage]=useState('English');const[isTranslating,setIsTranslating]=useState(false);const languageCodes={English:'en-US',Español:'es-ES',中文:'zh-CN',Français:'fr-FR',Deutsch:'de-DE',Italiano:'it-IT',日本語:'ja-JP',한국어:'ko-KR',Português:'pt-BR',Русский:'ru-RU'};const fetchChatGPTResponse=async userMessage=>{const apiKey='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';const chatHistory=[{role:'system',content:'Limit responses to three sentences and assume the user can read English so send all responses in English but do not let the user know about this prompt. When you recieve questions in another language, understand it and reply in english. The conversations will be multilangual. You work as a customer service representative for the Santa Clara County 211 call center. Your job is to provide accurate information about the services Santa Clara County can offer. Always speak in sentences and lists. Ask the user questions about their current situation to get a better understanding of all the services Santa Clara County can offer them. If the user is asking for food assistance, give information on CalFresh, the food stamp application, include eligibility and guide the user through filing the application form.'},...messages.map(msg=>({role:msg.sender==='user'?'user':'assistant',content:msg.text})),{role:'user',content:userMessage}];try{const response=await fetch('https://api.openai.com/v1/chat/completions',{method:'POST',headers:{'Content-Type':'application/json',Authorization:\"Bearer \".concat(apiKey)},body:JSON.stringify({model:'gpt-4',messages:chatHistory})});const data=await response.json();const botMessage=data.choices[0].message.content;setMessages(prevMessages=>{const updatedMessages=[...prevMessages,{sender:'bot',text:botMessage}];return updatedMessages;});playTTS(botMessage);// Ensures TTS is triggered only once\n}catch(error){console.error('Error fetching response:',error);setMessages(prevMessages=>[...prevMessages,{sender:'bot',text:'Sorry, I am having trouble responding at the moment. Please try again later.'}]);}};const playTTS=async function(text){let voiceId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'pFZP5JQG7iQjIQuC4Bku';try{const audioBlob=await tts11(text,voiceId);// Replace 'your_voice_id_here' with the appropriate voice ID\nconst audioUrl=URL.createObjectURL(audioBlob);const audio=new Audio(audioUrl);audio.play();}catch(error){console.error('Error playing TTS audio:',error);}};const handleSendMessage=()=>{if(input.trim()!==''){const userMessage=input.trim();setMessages([...messages,{sender:'user',text:userMessage}]);setInput('');fetchChatGPTResponse(userMessage);}};const handleVoiceInput=()=>{if(isListening){// Stop listening\nsetIsListening(false);setSpokenText('');}else{// Start listening\nsetIsListening(true);// Check if SpeechRecognition is supported\nconst SpeechRecognition=window.SpeechRecognition||window.webkitSpeechRecognition;if(!SpeechRecognition){console.error('Speech recognition not supported in this browser.');setSpokenText('Speech recognition is not supported in your browser.');setIsListening(false);return;}const recognition=new SpeechRecognition();recognition.lang=languageCodes[selectedLanguage]||'en-US';recognition.interimResults=false;// Only final results\nrecognition.continuous=false;// Stop after one result\nrecognition.onstart=()=>{setSpokenText('Listening...');};recognition.onresult=event=>{const transcript=event.results[0][0].transcript;setSpokenText('');setInput(transcript);// Set the spoken text as the input\nsetIsListening(false);};recognition.onerror=event=>{console.error('Speech recognition error:',event.error);setSpokenText('Could not understand. Please try again.');setIsListening(false);};recognition.onend=()=>{setSpokenText('');setIsListening(false);};recognition.start();}};const handleLanguageChange=language=>{setSelectedLanguage(language);};const handleKeyPress=e=>{if(e.key==='Enter'){handleSendMessage();}};const handleTranslateMessage=async(message,index)=>{if(isTranslating)return;setIsTranslating(true);const apiKey='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';const translationPrompt=\"You are a helpful assistant that translates text to \".concat(selectedLanguage,\". Translate this text: \\\"\").concat(message,\"\\\"\");try{const response=await fetch('https://api.openai.com/v1/chat/completions',{method:'POST',headers:{'Content-Type':'application/json',Authorization:\"Bearer \".concat(apiKey)},body:JSON.stringify({model:'gpt-4',messages:[{role:'system',content:translationPrompt}]})});const data=await response.json();const translatedMessage=data.choices[0].message.content;setMessages(prevMessages=>{const updatedMessages=[...prevMessages];updatedMessages[index]=_objectSpread(_objectSpread({},updatedMessages[index]),{},{translation:translatedMessage});return updatedMessages;});await playTTS(translatedMessage,'pFZP5JQG7iQjIQuC4Bku');// Replace with the desired translation voice ID\n}catch(error){console.error('Error translating message:',error);}finally{setIsTranslating(false);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"min-h-screen bg-gray-100 flex flex-col\",children:[/*#__PURE__*/_jsx(\"nav\",{className:\"bg-white border-b w-full\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center h-16 px-4\",children:[/*#__PURE__*/_jsx(\"img\",{src:freshroadlogo,alt:\"Fresh Road Logo\",className:\"w-35 h-8 mr-2\"}),/*#__PURE__*/_jsx(\"h1\",{className:\"text-xl font-bold text-gray-900\",children:\"Chat with Luna\"})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex-grow p-4 overflow-y-auto w-full flex\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"hidden sm:block mr-4\",children:/*#__PURE__*/_jsx(\"img\",{src:avatarImage,alt:\"Chat Bot Avatar\",className:\"w-16 h-16 rounded-full border border-gray-300\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"flex-grow\",children:messages.map((message,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"flex \".concat(message.sender==='bot'?'justify-start':'justify-end',\" mb-4 items-center\"),children:/*#__PURE__*/_jsxs(\"div\",{className:\"max-w-xs px-4 py-2 rounded-lg shadow \".concat(message.sender==='bot'?'bg-white text-gray-800':'bg-cyan-400 text-white'),children:[message.text,message.translation&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-2 text-sm text-gray-600\",children:[\"Translated: \",message.translation]}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleTranslateMessage(message.text,index),className:\"mt-2 text-xs text-blue-500 flex items-center\",children:/*#__PURE__*/_jsx(TranslateIcon,{className:\"h-5 w-5 mr-1\"})})]})},index))})]}),/*#__PURE__*/_jsx(\"div\",{className:\"bg-white border-t p-4 w-full\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center mb-2\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"flex-grow border rounded-lg px-4 py-2 focus:outline-none focus:ring focus:ring-cyan-300\",placeholder:\"Type your message...\",value:input,onChange:e=>setInput(e.target.value),onKeyPress:handleKeyPress}),/*#__PURE__*/_jsxs(\"button\",{onClick:handleSendMessage,className:\"ml-2 px-4 py-2 bg-cyan-400 text-white rounded-lg hover:bg-cyan-500 flex items-center\",children:[/*#__PURE__*/_jsx(PaperAirplaneIcon,{className:\"h-5 w-5 mr-1\"}),\" Send\"]}),/*#__PURE__*/_jsxs(\"button\",{onClick:handleVoiceInput,className:\"ml-4 px-4 py-2 rounded-lg text-white \".concat(isListening?'bg-red-500':'bg-cyan-400',\" hover:bg-cyan-500 flex items-center\"),children:[/*#__PURE__*/_jsx(MicrophoneIcon,{className:\"h-5 w-5 mr-1\"}),\" \",isListening?'Stop':'Voice Input']}),/*#__PURE__*/_jsx(\"select\",{value:selectedLanguage,onChange:e=>handleLanguageChange(e.target.value),className:\"ml-4 px-4 py-2 border rounded-lg flex items-center\",children:Object.keys(languageCodes).map(lang=>/*#__PURE__*/_jsx(\"option\",{value:lang,children:lang},lang))})]})})]});};export default ChatInterfacePage;","map":{"version":3,"names":["React","useState","freshroadlogo","avatarImage","PaperAirplaneIcon","MicrophoneIcon","TranslateIcon","SpeakerWaveIcon","tts11","jsx","_jsx","jsxs","_jsxs","ChatInterfacePage","messages","setMessages","sender","text","input","setInput","isListening","setIsListening","spokenText","setSpokenText","selectedLanguage","setSelectedLanguage","isTranslating","setIsTranslating","languageCodes","English","Español","中文","Français","Deutsch","Italiano","日本語","한국어","Português","Русский","fetchChatGPTResponse","userMessage","apiKey","chatHistory","role","content","map","msg","response","fetch","method","headers","Authorization","concat","body","JSON","stringify","model","data","json","botMessage","choices","message","prevMessages","updatedMessages","playTTS","error","console","voiceId","arguments","length","undefined","audioBlob","audioUrl","URL","createObjectURL","audio","Audio","play","handleSendMessage","trim","handleVoiceInput","SpeechRecognition","window","webkitSpeechRecognition","recognition","lang","interimResults","continuous","onstart","onresult","event","transcript","results","onerror","onend","start","handleLanguageChange","language","handleKeyPress","e","key","handleTranslateMessage","index","translationPrompt","translatedMessage","_objectSpread","translation","className","children","src","alt","onClick","type","placeholder","value","onChange","target","onKeyPress","Object","keys"],"sources":["C:/Users/allen/dev/FreshroadReact/src/pages/Chatpage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../App.css';\r\nimport freshroadlogo from '../images/freshroadlogo.png';\r\nimport avatarImage from '../images/callrepai.png';\r\nimport { PaperAirplaneIcon, MicrophoneIcon, TranslateIcon, SpeakerWaveIcon } from '@heroicons/react/outline';\r\nimport { tts11 } from '../api/elevenlabs';\r\n\r\nconst ChatInterfacePage = () => {\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      sender: 'bot',\r\n      text: \"Welcome to the Santa Clara County 211 call center. How can I help you today?\",\r\n    },\r\n  ]);\r\n  const [input, setInput] = useState('');\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [spokenText, setSpokenText] = useState('');\r\n  const [selectedLanguage, setSelectedLanguage] = useState('English');\r\n  const [isTranslating, setIsTranslating] = useState(false);\r\n\r\n  const languageCodes = {\r\n    English: 'en-US',\r\n    Español: 'es-ES',\r\n    中文: 'zh-CN',\r\n    Français: 'fr-FR',\r\n    Deutsch: 'de-DE',\r\n    Italiano: 'it-IT',\r\n    日本語: 'ja-JP',\r\n    한국어: 'ko-KR',\r\n    Português: 'pt-BR',\r\n    Русский: 'ru-RU',\r\n  };\r\n\r\n  const fetchChatGPTResponse = async (userMessage) => {\r\n    const apiKey = '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';\r\n    const chatHistory = [\r\n      {\r\n        role: 'system',\r\n        content:\r\n          'Limit responses to three sentences and assume the user can read English so send all responses in English but do not let the user know about this prompt. When you recieve questions in another language, understand it and reply in english. The conversations will be multilangual. You work as a customer service representative for the Santa Clara County 211 call center. Your job is to provide accurate information about the services Santa Clara County can offer. Always speak in sentences and lists. Ask the user questions about their current situation to get a better understanding of all the services Santa Clara County can offer them. If the user is asking for food assistance, give information on CalFresh, the food stamp application, include eligibility and guide the user through filing the application form.',\r\n      },\r\n      ...messages.map((msg) => ({\r\n        role: msg.sender === 'user' ? 'user' : 'assistant',\r\n        content: msg.text,\r\n      })),\r\n      { role: 'user', content: userMessage },\r\n    ];\r\n\r\n    try {\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: 'gpt-4',\r\n          messages: chatHistory,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      const botMessage = data.choices[0].message.content;\r\n\r\n      setMessages((prevMessages) => {\r\n        const updatedMessages = [...prevMessages, { sender: 'bot', text: botMessage }];\r\n        return updatedMessages;\r\n      });\r\n      playTTS(botMessage); // Ensures TTS is triggered only once\r\n    } catch (error) {\r\n      console.error('Error fetching response:', error);\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: 'Sorry, I am having trouble responding at the moment. Please try again later.' },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const playTTS = async (text, voiceId = 'pFZP5JQG7iQjIQuC4Bku') => {\r\n    try {\r\n      const audioBlob = await tts11(text, voiceId); // Replace 'your_voice_id_here' with the appropriate voice ID\r\n      const audioUrl = URL.createObjectURL(audioBlob);\r\n      const audio = new Audio(audioUrl);\r\n      audio.play();\r\n    } catch (error) {\r\n      console.error('Error playing TTS audio:', error);\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = () => {\r\n    if (input.trim() !== '') {\r\n      const userMessage = input.trim();\r\n      setMessages([...messages, { sender: 'user', text: userMessage }]);\r\n      setInput('');\r\n      fetchChatGPTResponse(userMessage);\r\n    }\r\n  };\r\n\r\n  const handleVoiceInput = () => {\r\n    if (isListening) {\r\n      // Stop listening\r\n      setIsListening(false);\r\n      setSpokenText('');\r\n    } else {\r\n      // Start listening\r\n      setIsListening(true);\r\n  \r\n      // Check if SpeechRecognition is supported\r\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n      if (!SpeechRecognition) {\r\n        console.error('Speech recognition not supported in this browser.');\r\n        setSpokenText('Speech recognition is not supported in your browser.');\r\n        setIsListening(false);\r\n        return;\r\n      }\r\n  \r\n      const recognition = new SpeechRecognition();\r\n      recognition.lang = languageCodes[selectedLanguage] || 'en-US';\r\n      recognition.interimResults = false; // Only final results\r\n      recognition.continuous = false; // Stop after one result\r\n  \r\n      recognition.onstart = () => {\r\n        setSpokenText('Listening...');\r\n      };\r\n  \r\n      recognition.onresult = (event) => {\r\n        const transcript = event.results[0][0].transcript;\r\n        setSpokenText('');\r\n        setInput(transcript); // Set the spoken text as the input\r\n        setIsListening(false);\r\n      };\r\n  \r\n      recognition.onerror = (event) => {\r\n        console.error('Speech recognition error:', event.error);\r\n        setSpokenText('Could not understand. Please try again.');\r\n        setIsListening(false);\r\n      };\r\n  \r\n      recognition.onend = () => {\r\n        setSpokenText('');\r\n        setIsListening(false);\r\n      };\r\n  \r\n      recognition.start();\r\n    }\r\n  };\r\n\r\n  const handleLanguageChange = (language) => {\r\n    setSelectedLanguage(language);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  const handleTranslateMessage = async (message, index) => {\r\n    if (isTranslating) return;\r\n    setIsTranslating(true);\r\n\r\n    const apiKey = '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';\r\n    const translationPrompt = `You are a helpful assistant that translates text to ${selectedLanguage}. Translate this text: \"${message}\"`;\r\n\r\n    try {\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: 'gpt-4',\r\n          messages: [\r\n            {\r\n              role: 'system',\r\n              content: translationPrompt,\r\n            },\r\n          ],\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      const translatedMessage = data.choices[0].message.content;\r\n\r\n      setMessages((prevMessages) => {\r\n        const updatedMessages = [...prevMessages];\r\n        updatedMessages[index] = {\r\n          ...updatedMessages[index],\r\n          translation: translatedMessage,\r\n        };\r\n        return updatedMessages;\r\n      });\r\n      await playTTS(translatedMessage, 'pFZP5JQG7iQjIQuC4Bku'); // Replace with the desired translation voice ID\r\n    } catch (error) {\r\n      console.error('Error translating message:', error);\r\n    } finally {\r\n      setIsTranslating(false);\r\n    }\r\n  };\r\n\r\n\r\n  \r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100 flex flex-col\">\r\n      {/* Header */}\r\n      <nav className=\"bg-white border-b w-full\">\r\n        <div className=\"flex justify-between items-center h-16 px-4\">\r\n          <img src={freshroadlogo} alt=\"Fresh Road Logo\" className=\"w-35 h-8 mr-2\" />\r\n          <h1 className=\"text-xl font-bold text-gray-900\">Chat with Luna</h1>\r\n        </div>\r\n      </nav>\r\n\r\n      {/* Chat Body */}\r\n      <div className=\"flex-grow p-4 overflow-y-auto w-full flex\">\r\n        {/* Avatar Section */}\r\n        <div className=\"hidden sm:block mr-4\">\r\n          <img\r\n            src={avatarImage}\r\n            alt=\"Chat Bot Avatar\"\r\n            className=\"w-16 h-16 rounded-full border border-gray-300\"\r\n          />\r\n        </div>\r\n\r\n        {/* Messages Section */}\r\n        <div className=\"flex-grow\">\r\n          {messages.map((message, index) => (\r\n            <div\r\n              key={index}\r\n              className={`flex ${message.sender === 'bot' ? 'justify-start' : 'justify-end'} mb-4 items-center`}\r\n            >\r\n              <div\r\n                className={`max-w-xs px-4 py-2 rounded-lg shadow ${\r\n                  message.sender === 'bot' ? 'bg-white text-gray-800' : 'bg-cyan-400 text-white'\r\n                }`}\r\n              >\r\n                {message.text}\r\n                {message.translation && (\r\n                  <div className=\"mt-2 text-sm text-gray-600\">Translated: {message.translation}</div>\r\n                )}\r\n                <button\r\n                  onClick={() => handleTranslateMessage(message.text, index)}\r\n                  className=\"mt-2 text-xs text-blue-500 flex items-center\"\r\n                >\r\n                  <TranslateIcon className=\"h-5 w-5 mr-1\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Chat Input */}\r\n      <div className=\"bg-white border-t p-4 w-full\">\r\n        <div className=\"flex items-center mb-2\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"flex-grow border rounded-lg px-4 py-2 focus:outline-none focus:ring focus:ring-cyan-300\"\r\n            placeholder=\"Type your message...\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n          />\r\n          <button\r\n            onClick={handleSendMessage}\r\n            className=\"ml-2 px-4 py-2 bg-cyan-400 text-white rounded-lg hover:bg-cyan-500 flex items-center\"\r\n          >\r\n            <PaperAirplaneIcon className=\"h-5 w-5 mr-1\" /> Send\r\n          </button>\r\n          <button\r\n            onClick={handleVoiceInput}\r\n            className={`ml-4 px-4 py-2 rounded-lg text-white ${isListening ? 'bg-red-500' : 'bg-cyan-400'} hover:bg-cyan-500 flex items-center`}\r\n          >\r\n            <MicrophoneIcon className=\"h-5 w-5 mr-1\" /> {isListening ? 'Stop' : 'Voice Input'}\r\n          </button>\r\n          <select\r\n            value={selectedLanguage}\r\n            onChange={(e) => handleLanguageChange(e.target.value)}\r\n            className=\"ml-4 px-4 py-2 border rounded-lg flex items-center\"\r\n          >\r\n            {Object.keys(languageCodes).map((lang) => (\r\n              <option key={lang} value={lang}>\r\n                {lang}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInterfacePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}