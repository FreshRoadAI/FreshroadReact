{"ast":null,"code":"import axios from'axios';const base='https://api.elevenlabs.io/v1';const headers={'Accept':'audio/mpeg','Content-Type':'application/json','xi-api-key':'sk_a36cf48b18267cb52d1a861bda592227e582eec79e608500'};const model='eleven_multilingual_v2';// Updated model ID\n/**\r\n * Function to interact with the ElevenLabs Text-to-Speech API.\r\n * @param {string} text - The text to convert to speech.\r\n * @param {string} voice - The voice ID to use for the TTS conversion.\r\n * @returns {Promise<Blob>} - Returns a Blob of the audio data.\r\n */export const tts11=async(text,voice)=>{try{const response=await axios.post(\"\".concat(base,\"/text-to-speech/\").concat(voice),{model_id:model,text:text,voice_settings:{stability:0.15,similarity_boost:0.75}},{headers:headers,responseType:'arraybuffer'});return new Blob([response.data],{type:'audio/mpeg'});}catch(error){console.error('Error with ElevenLabs TTS API:',error);throw new Error('Failed to fetch TTS audio.');}};","map":{"version":3,"names":["axios","base","headers","model","tts11","text","voice","response","post","concat","model_id","voice_settings","stability","similarity_boost","responseType","Blob","data","type","error","console","Error"],"sources":["C:/Users/allen/dev/FreshroadReact/src/api/elevenlabs.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst base = 'https://api.elevenlabs.io/v1';\r\nconst headers = {\r\n  'Accept': 'audio/mpeg',\r\n  'Content-Type': 'application/json',\r\n  'xi-api-key': 'sk_a36cf48b18267cb52d1a861bda592227e582eec79e608500',\r\n};\r\nconst model = 'eleven_multilingual_v2'; // Updated model ID\r\n\r\n/**\r\n * Function to interact with the ElevenLabs Text-to-Speech API.\r\n * @param {string} text - The text to convert to speech.\r\n * @param {string} voice - The voice ID to use for the TTS conversion.\r\n * @returns {Promise<Blob>} - Returns a Blob of the audio data.\r\n */\r\nexport const tts11 = async (text, voice) => {\r\n  try {\r\n    const response = await axios.post(\r\n      `${base}/text-to-speech/${voice}`,\r\n      {\r\n        model_id: model,\r\n        text: text,\r\n        voice_settings: {\r\n          stability: 0.15,\r\n          similarity_boost: 0.75,\r\n        },\r\n      },\r\n      {\r\n        headers: headers,\r\n        responseType: 'arraybuffer',\r\n      }\r\n    );\r\n\r\n    return new Blob([response.data], { type: 'audio/mpeg' });\r\n  } catch (error) {\r\n    console.error('Error with ElevenLabs TTS API:', error);\r\n    throw new Error('Failed to fetch TTS audio.');\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,KAAM,CAAAC,IAAI,CAAG,8BAA8B,CAC3C,KAAM,CAAAC,OAAO,CAAG,CACd,QAAQ,CAAE,YAAY,CACtB,cAAc,CAAE,kBAAkB,CAClC,YAAY,CAAE,qDAChB,CAAC,CACD,KAAM,CAAAC,KAAK,CAAG,wBAAwB,CAAE;AAExC;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,KAAK,CAAG,KAAAA,CAAOC,IAAI,CAAEC,KAAK,GAAK,CAC1C,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAP,KAAK,CAACQ,IAAI,IAAAC,MAAA,CAC5BR,IAAI,qBAAAQ,MAAA,CAAmBH,KAAK,EAC/B,CACEI,QAAQ,CAAEP,KAAK,CACfE,IAAI,CAAEA,IAAI,CACVM,cAAc,CAAE,CACdC,SAAS,CAAE,IAAI,CACfC,gBAAgB,CAAE,IACpB,CACF,CAAC,CACD,CACEX,OAAO,CAAEA,OAAO,CAChBY,YAAY,CAAE,aAChB,CACF,CAAC,CAED,MAAO,IAAI,CAAAC,IAAI,CAAC,CAACR,QAAQ,CAACS,IAAI,CAAC,CAAE,CAAEC,IAAI,CAAE,YAAa,CAAC,CAAC,CAC1D,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtD,KAAM,IAAI,CAAAE,KAAK,CAAC,4BAA4B,CAAC,CAC/C,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}